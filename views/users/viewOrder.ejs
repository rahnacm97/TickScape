<%- include("../../views/partials/user/header") %>
<style>
  /* Other Products Section */
  .text-danger {
    color: red;
}
.text-default {
    color: black;
}
.main-container{
  gap: 20px;
  padding: 20px;
  background: #fff;
  border-radius: 10px;
  transition: transform 0.2s ease-in-out;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  max-width: 1175px;
  margin: 20px auto;
}
.otherItem {
  display: flex;
  align-items: flex-start;
  gap: 20px;
  padding: 20px;
  background: #fff;
  border-radius: 10px;
  transition: transform 0.2s ease-in-out;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  max-width: 1175px;
  margin: 20px auto;
  font-size: 12px;

    /* max-width: 1150px;
    margin-top: 20px;
    padding: 15px;
    background: #ffffff;
    border-radius: 8px;
    box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.1); */
}

h3 {
    font-size: 18px;
    font-weight: bold;
    margin-bottom: 15px;
    color: #333;
}

/* List Styling */
.list {
    width: 1100px;
    list-style: none;
    padding: 0;
}

.list li {
    background: #f9f9f9;
    padding: 15px;
    border-radius: 8px;
    box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.1);
    margin-bottom: 12px;
    display: flex;
    align-items: center;
    gap: 15px;
    flex-wrap: wrap;
}

/* Product Image */
.list li img {
    width: 80px;
    height: 80px;
    border-radius: 8px;
    object-fit: cover;
    border: 1px solid #ddd;
}

/* Product Details */
.list li p {
    font-size: 14px;
    margin: 3px 0;
    color: #333;
    flex: 1;
}

/* Bold Labels */
.list li p strong {
    color: #555;
}

/* Status Colors */
.text-danger {
    color: red;
    font-weight: bold;
}

.text-success {
    color: green;
    font-weight: bold;
}

/* Divider */
hr {
    border: 0;
    height: 1px;
    background: #ddd;
    margin-top: 10px;
}

  body {
            font-family: Arial, sans-serif;
            background-color: #f8f9fa;
            margin: 0;
            padding: 0;
        }
      /* General Styling */
.container1 {
  display: flex;
  align-items: flex-start;
  gap: 20px;
  padding: 20px;
  background: #fff;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  max-width: 1175px;
  margin: 20px auto;
  font-size: 12px;
}
.container2 {
  align-items: center;
  gap: 20px;
  padding: 20px;
  background: #fff;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  max-width: 1175px;
  margin: 20px auto;
  font-size: 12px;
}


/* Image Styling */
.image.container {
  flex: 1;
  max-width: 400px;
}

.image.container img {
  width: auto;
  height: 400px;
  border-radius: 10px;
  object-fit: cover;
}

/* Order Info Styling */
.order-info {
  flex: 2;
  display: flex;
  flex-direction: column;
  gap: 10px;
  font-family: Arial, sans-serif;
}

.order-header {
  font-size: 24px;
  font-weight: bold;
  margin-bottom: 10px;
  color: #333;
}

.order-detail {
  font-size: 16px;
  color: #555;
  display: flex;
  /* justify-content: space-between; */
  border-bottom: 1px solid #ddd;
  padding: 5px 0;
}

.order-detail span {
  font-weight: bold;
  color: #000;
}

/* Address Styling */
.order-detail div {
  margin-top: 5px;
  font-size: 14px;
  color: #333;
}

/* Buttons */
.btn1-container {
  display: flex;
  justify-content: center;
  margin-top: 20px;
}

.btn {
  padding: 10px 15px;
  margin: 10px 5px;
  text-decoration: none;
  color: #fff;
  background: #007bff;
  border-radius: 5px;
  font-size: 14px;
  transition: background 0.3s;
}

.btn:hover {
  background: #0056b3;
}

.btn-sm {
  background: #dc3545;
}

.btn-sm:hover {
  background: #c82333;
}
/* Responsive Design */
@media (max-width: 768px) {
  .container1 {
    flex-direction: column;
    align-items: center;
    text-align: center;
  }

  .image.container {
    max-width: 100%;
  }
}

 .page-header .breadcrumb-wrap {
    margin-top: 10px;
    padding: 15px 0;
  }

  .breadcrumb-wrap {
    padding: 15px 0;
    background-color: #1e918b;
    color: #fff;
  }

  .breadcrumb a {
    color: #088178;
    text-decoration: none;
  }

  .breadcrumb span {
    margin: 0 5px;
    color: rgb(125, 124, 124);
  }


/* Status-specific colors */
.order-placed { color: blue; }
.processing { color: orange; }
.cancelled { color: red; }
.shipped { color: purple; }
.out-for-delivery { color: darkgreen; }
.delivered { color: green; }

.tracking-progress {
  display: flex;
  justify-content: space-between;
  align-items: center;
  position: relative;
  margin: 30px 0;
  padding: 20px;
  width: 80%;
  margin: auto;
  font-size: 12px;
}

.completed {
    font-weight: bold;
}

.completed .circle {
    background-color: green !important;
    color: white !important;
}

.cancelled .circle {
    background-color: red !important;
    color: white !important;
}

.tracking-step {
  text-align: center;
  flex: 1;
  position: relative;
  font-size: 12px;
}

.tracking-step .circle {
  width: 30px;
  height: 30px;
  border-radius: 50%;
  background-color: #ccc;
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
  margin: 0 auto;
  position: relative;
  z-index: 2;
  font-size: 12px;
}

/* Connector Line */
.tracking-step::before {
  content: "";
  position: absolute;
  width: 100%;
  height: 4px;
  background-color: #ccc; /* Default gray */
  top: 50%;
  left: -50%;
  z-index: 1;
  margin-bottom: 20px;
}

/* Hide line for first step */
.tracking-step:first-child::before {
  display: none;
}

/* Change line color when step is completed */
.tracking-step.completed::before {
  background-color: green !important; /* Same as the completed circle */
}

.tracking-step small {
    display: block;
    position: absolute;
    font-size: 12px;
    margin-left: 50px;
    line-height: 1; 
}
.text-red1 {
    color: red;
    font-weight: bold;
}

/* Modal Background */
.modal {
  display: none;
  position: fixed;
  z-index: 1000;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  overflow-y: auto; /* Enable vertical scrolling */
  display: flex;
  align-items: center; /* Center vertically */
  justify-content: center; /* Center horizontally */
}

/* Modal Content */
.modal-content {
  background-color: white;
  padding: 20px;
  border-radius: 10px;
  width: 50%;
  max-width: 500px; /* Limit max width */
  box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.3);
  position: relative;
}

/* Close Button */
.close {
  position: absolute;
  top: 10px;
  right: 15px;
  font-size: 24px;
  cursor: pointer;
  color: black;
}

.close:hover {
  color: red;
}

/* Make form fields more readable */
.modal-content input {
  width: 100%;
  padding: 8px;
  margin: 8px 0;
  border: 1px solid #ccc;
  border-radius: 5px;
}

/* Responsive - Fullscreen modal on small screens */
@media screen and (max-width: 600px) {
  .modal-content {
    width: 90%;
  }
}

.btn-notify{
  background-color: #1cb28f;
  color: #eff2f5;
  border: 1px solid #27d7ce;
  border-radius: 5px;
  padding: 5px 10px;
  margin: 5px;
  text-decoration: none;
}
.btn1 {
  background-color: #0e944f;
  color: white;
  padding: 8px 16px;
  border-radius: 4px;
  text-decoration: none;
  max-width: 150px;
  display: inline-flex;
  align-items: center;
  justify-content: center;
}

.btn1:hover {
  background-color: #03490f;
  color: white;

}

</style>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<main class="main">
    <section class="pt-10 pb-10">
        <div class="page-header breadcrumb-wrap" style="background-color: #ede9ec;">
          <div class="container">
            <div class="breadcrumb">
              <a href="/" rel="nofollow">Home</a>
              <span></span> <a href="/userProfile" rel="nofollow">Profile</a>
              <span></span> <a href="/orders" rel="nofollow">Orders</a>  
              <span></span> Order Details
              
            </div>
          </div>
        </div>
        <div class="order-header" style="margin-left: 20px;margin-top: 20px;">Order Details</div>    
  <% if (order.status !== "Payment Pending") { %>
  <div class="main-container">
  <div class="tracking-info">
  <h3 style="margin-left: 20px; margin-top: 20px;">Track Your Order</h3>
  <div class="container2">
      <div>
          <p><strong class="status">Current Status:</strong> <span class="<%= order.status.toLowerCase().replace(/\s+/g, '-') %>"><%= order.status %></span></p>
      </div>
      <div class="tracking-progress">
        <% const statuses = ["Order Placed", "Processing", "Shipped", "Out for Delivery", "Delivered"]; %>
      
        <% let latestStatus = trackingHistory.length > 0 ? trackingHistory[trackingHistory.length - 1].status : order.status; %>
        <% let currentIndex = statuses.indexOf(latestStatus); %>
        <% if (currentIndex === -1) { currentIndex = 0; } %>
      
        <% const isCancelled = order.status === "Cancelled"; %>
      
        <% if (isCancelled) { %>
          <div class="tracking-step completed cancelled">
            <div class="circle cancelled">X</div>
            <p>Cancelled</p>
          </div>
        <% } else { %>
          <% statuses.forEach((step, index) => { 
              let trackingEntry = trackingHistory.find(entry => entry.status === step);
              let isCompleted = index <= currentIndex;
          %>
          <% console.log("Step:", step, "Index:", index, "CurrentIndex:", currentIndex, "isCompleted:", isCompleted); %>
            <div class="tracking-step <%= isCompleted ? 'completed' : '' %> <%= step.toLowerCase().replace(/\s+/g, '-') %>">
              <div class="circle <%= isCompleted ? 'completed-circle' : '' %>">
                <%- isCompleted ? '<i class="fas fa-check"></i>' : index + 1 %>
              </div>
              <p><%= step %></p>
              <% if (trackingEntry) { %>
                <small><%= new Date(trackingEntry.date).toLocaleDateString("en-US", { year: "numeric", month: "short", day: "numeric" }) %></small>
              <% } %>
            </div>
          <% }); %>
        <% } %>
      </div>
                  
      <% let deliveredEntry = trackingHistory.find(entry => entry.status === "Delivered"); %>
      
      <% if (deliveredEntry) { %>
        <div class="expected-delivery">
            <p><strong>Delivered On:</strong> <%= new Date(deliveredEntry.date).toLocaleDateString("en-US", { year: "numeric", month: "short", day: "numeric" }) %></p>
        </div>
      <% } else if (expectedDeliveryDate) { %>
        <div class="expected-delivery">
            <p><strong>Expected Delivery:</strong> <%= expectedDeliveryDate.toLocaleDateString("en-US", { year: "numeric", month: "short", day: "numeric" }) %></p>
        </div>
      <% } %>
  </div>
<% } else { %>
  <div class="main-container">
  <div class="tracking-info">
  <h3 style="margin-left: 20px; margin-top: 20px;">Payment Pending</h3>
  <div class="container2">
    <p>Please complete your payment to start tracking your order.</p>
  </div>
  </div>
  </div>
<% } %>%>
        
      
          <div class="order-status">
          <% if (order.status === 'Order Placed') { %>
            <p style="color: rgb(0, 42, 255);">Your order has been placed.</p>
            <% } else if (order.status === 'Processing') { %>
              <p style="color: orange;">Your order is still being processed. Please check back later for updates.</p>
          <% } else if (order.status === 'Shipped') { %>
            <p style="color: rgb(109, 6, 213);">Your order has been shipped. You can expect delivery soon.</p>
            <% } else if (order.status === 'Out for Delivery') { %>
              <p style="color: green;">Your order has been out for delivery!</p>
          <% } else if (order.status === 'Delivered') { %>
            <p style="color: rgb(6, 168, 6);">Your order has been delivered. Thank you for shopping with us!</p>
            <% } else if (order.status === 'Cancelled') { %>
              <p style="color: rgb(241, 8, 8);">Your order has been Cancelled!</p>
          <% } %>
        </div>
        </div>
        
    </div>        
</div> 
      <div class="order-item">         
          <div class="container1">              
            <div class="order-info">          
              <div class="order-detail"><span>Order ID:</span> <%= order.orderId %></div>
              <div class="order-detail"><span>Total Items: <%= order.orderedItems.length %></span></div>
              <div class="order-detail"><span>Total Price:</span> ₹<%= order.totalPrice %></div>
              <div class="order-detail"><span>GST:</span> ₹<%= order.gstAmount %></div>
              <div class="order-detail"><span>Discount:</span> ₹<%= order.discount %></div>
              <div class="order-detail"><span>Shipping:</span> ₹<%= order.shipping %></div>
              <div class="order-detail"><span>Final Amount:</span> ₹<%= (order.finalAmount).toFixed(2) %></div>
              <div class="order-detail">
                <span>Invoice Date:</span> 
                <%= new Date(order.invoiceDate).toLocaleDateString('en-IN', { weekday: 'short', month: 'short', day: 'numeric', year: 'numeric' }) %>
              </div>
              
              <div class="order-detail">
                <span>Order Status:</span> 
                <% if (order.status === 'Order Placed') { %>
                  <span style="color: rgb(0, 42, 255);"><%= order.status %></span>
                  <% } else if (order.status === 'Processing') { %>
                    <span style="color: orange;"><%= order.status %></span>
                <% } else if (order.status === 'Shipped') { %>
                  <span style="color: rgb(109, 6, 213);"><%= order.status %></span>
                  <% } else if (order.status === 'Out for Delivery') { %>
                    <span style="color: green;"><%= order.status %></span>
                <% } else if (order.status === 'Delivered') { %>
                  <span style="color: rgb(6, 168, 6);"><%= order.status %></span>
                  <% } else if (order.status === 'Cancelled') { %>
                    <span style="color: rgb(241, 8, 8);"><%= order.status %></span>
                  <% } else if (order.status === 'Payment Pending') { %>
                    <span style="color: #810845"><%= order.status %></span>
            <% } else {%>
              <span style="color: rgb(6, 168, 6);">Delivered</span>
              <%}%>
              </div>              
            
              <div class="order-detail">          
                    <span>Deliver To: <%= address.name %></span>           
                    <div style="margin-top: 20px;">
                      <% if (address) { %>
                        <p class="address"><strong><%= address.addressType || 'Address Type Not Provided' %></strong></p>
                        <p class="address">
                            <%= address.city || 'City Not Available' %>, <%= address.state || 'State Not Available' %>,<br>
                            <%= address.landMark || 'Landmark Not Available' %>, <%= address.pincode || 'Pincode Not Available' %>,<br>
                            <%= address.phone || 'Phone Not Available' %>, <%= address.altPhone || 'Alt Phone Not Available' %>
                        </p>
                    </div>
                <% } else { %>
                    <p class="no-address">No address available for this order.</p>
                <% } %>
            </div> 
            <% if (order.paymentMethod !== "Cash on Delivery" && (order.status !== "Payment Pending" || order.status === "Delivered")) { %>
              <a href="/download-invoice/<%= order._id %>" class="btn1 btn-sm">Download Invoice</a>
            <% } %>

    <h3 style="margin-left: 20px;margin-top: 20px;">Products in this Order:</h3>
    <div class="otherItem">
      <% if (orderItems.length > 0) { %>
        <ul class="list">
          <% orderItems.forEach(item => { %>
            <li>
              <p>
                <% if (item.productId && item.productId._id) { %>
                  <a href="/viewOrder/<%= order._id %>?productId=<%= item.productId._id %>">
                    <img src="http://localhost:3000/<%= item.productImage || item.productId.productImage[0] %>" 
                    alt="<%= item.productName || item.productId.productName %>">               
                  </a>
                <% } %>
              </p>
              <p><strong>Product Name:</strong> <%= item.productName || item.productId.productName %></p>
              <p><strong>Quantity:</strong> <%= item.quantity %></p>
              <p><strong>Price per Item:</strong> ₹<%= item.price %></p>
              
              <!-- Show status and buttons only if order.status is not "Payment Pending" -->
              <% if (order.status !== "Payment Pending") { %>
                <p>
                  <strong>Status:</strong> 
                  <span class="<%= (item.orderStatus || order.status) === 'Cancelled' ? 'text-danger' : 'text-default' %>">
                    <%= item.orderStatus %>
                  </span>
                </p>
                <% if (item.orderStatus !== 'Cancelled') { %>
                  <p><strong>Payment Method:</strong> <%= order.paymentMethod %></p>
                <% } %>
                <hr>
      
                <% if (item.orderStatus === 'Delivered') { %>
                  <div class="review-section">
                    <a href="/writeReview?productId=<%= item.productId._id %>&orderId=<%= order._id %>" class="btn btn-primary" style="text-transform: capitalize;"><i class="fas fa-star"></i>Write Review</a>
                    <button class="btn btn-notify" onclick="requestReturnItem('<%= order._id %>','<%= item.productId._id %>')" style="text-transform: capitalize;"><i class="fas fa-undo-alt"></i>Return</button>
                  </div>
                <% } else if (item.orderStatus === 'Return request') { %>              
                  <div class="btn1-container">
                    <a href="#" class="btn-notify">
                      <i class="fa fa-exchange"></i> Return Requested
                    </a>
                  </div>
                <% } else if (item.orderStatus === 'Returned') { %>  
                  <div class="btn1-container">
                    <a href="#" class="btn-returned">
                      <i class="fa fa-box-open"></i> Returned
                    </a>
                  </div>
                <% } else if (item.orderStatus === 'Return Denied') { %>  
                  <div class="btn1-container">
                    <a href="#" class="btn-returned">
                      <i class="fa fa-ban"></i> Return Denied
                    </a>
                  </div>
                <% } else if (item.orderStatus !== 'Cancelled') { %> 
                  <div class="btn1-container">
                    <a href="#" class="btn btn-sm" onclick="return confirmCancel(this, '<%= item._id %>')">
                      <i class="fa fa-times-circle"></i> Cancel Item
                    </a>
                  </div>
                <% } %>
              <% } %>
            </li>
          <% }) %>
        </ul>
      <% } else { %>
        <p>No other products in this order.</p>
      <% } %>
    </div>   


  <div class="btn1-container"> 
  <a href="/orders" class="btn" style="text-transform: capitalize;">Back to Orders</a>
  
  <% if (order.status === "Payment Pending") { %>
    <a href="#" class="btn btn-sm" onclick="retryPayment('<%= order._id %>')" style="background-color: #088178;">
      <i class="fa fa-redo"></i> Retry Payment
    </a>
  <% } else if (order.status !== "Cancelled" && order.status !== "Delivered" && !order.orderedItems.some(item => item.orderStatus === "Return request") && order.status !== "Returned") { %>
    <a href="#" class="btn btn-sm" onclick="return confirmOrderCancel(this, '<%= order._id %>')">
      <i class="fa fa-ban"></i> Cancel Order
    </a>
  <% } %>
</div>
</div>

</section>
</main>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
function confirmCancel(element, itemId) { 
    console.log("Item ID to cancel:", itemId);

    Swal.fire({
        title: "Are you sure?",
        text: "Please select a reason for cancellation",
        icon: "warning",
        input: "select",
        inputOptions: {
            "Changed My Mind": "Changed My Mind",
            "Found a Better Price": "Found a Better Price",
            "Item No Longer Needed": "Item No Longer Needed",
            "Ordered by Mistake": "Ordered by Mistake",
            "Other": "Other"
        },
        inputPlaceholder: "Select a reason ⏷",
        showCancelButton: true,
        confirmButtonText: "Yes, Cancel it",
        cancelButtonText: "No, Keep it",
        preConfirm: (reason) => {
            if (!reason) {
                Swal.showValidationMessage("Please select a reason");
                return false;
            }
            return reason;
        }
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/cancelOrder/${itemId}`, {
                method: "DELETE",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ reason: result.value })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    let successMessage = "Your order has been cancelled.";
                    
                    if (data.walletCredit) { 
                        successMessage += ` ₹${data.walletCredit} has been credited to your wallet.`; 
                    }

                    Swal.fire("Cancelled!", successMessage, "success")
                        .then(() => {
                          document.body.style.transition = 'opacity 0.3s';
                          document.body.style.opacity = '0';
                          setTimeout(() => window.location.reload(false), 100);
                        });
                } else {
                    Swal.fire({
                        title: "Error",
                        text: data.message || "Unable to cancel the order.",
                        icon: "error"
                    });
                }
            })
            .catch(error => {
                console.error("Error cancelling order:", error);
                Swal.fire("Error", "Something went wrong.", "error");
            });
        }
    });
}

function confirmOrderCancel(element, OrderId) { 
    console.log("Order ID to cancel:", OrderId);  
    Swal.fire({
        title: "Are you sure?",
        text: "Please select a reason for cancellation",
        icon: "warning",
        input: "select",
        inputOptions: {
            "Changed My Mind": "Changed My Mind",
            "Found a Better Price": "Found a Better Price",
            "Item No Longer Needed": "Item No Longer Needed",
            "Ordered by Mistake": "Ordered by Mistake",
            "Other": "Other"
        },
        inputPlaceholder: "Select a reason ⏷",
        showCancelButton: true,
        confirmButtonText: "Yes, Cancel it",
        cancelButtonText: "No, Keep it",
        preConfirm: (reason) => {
            if (!reason) {
                Swal.showValidationMessage("Please select a reason");
                return false;
            }
            return reason;
        }
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/cancelParentOrder/${OrderId}`, {  
                method: "DELETE",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ reason: result.value })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        title: "Cancelled!",
                        text: data.refundAmount > 0 
                            ? `Your order has been cancelled. ₹${data.refundAmount} has been credited to your wallet.` 
                            : "Your order has been cancelled.",
                        icon: "success"
                    }).then(() => {
                      document.body.style.transition = 'opacity 0.3s';
                      document.body.style.opacity = '0';
                      setTimeout(() => window.location.reload(false), 100);
                    });
                } else {
                    Swal.fire({
                        title: "Error",
                        text: data.message || "Something went wrong.",
                        icon: "error"
                    });
                }
            })
            .catch(error => {
                console.error("Error cancelling order:", error);
                Swal.fire("Error", "Something went wrong.", "error");
            });
        }
    });
}

function requestReturnItem(orderId, productId) {
    Swal.fire({
        title: 'Return Order Item ❓',
        text: 'Please select a reason for returning this item:',
        icon: 'question',
        input: 'select',
        inputOptions: {
            'Damaged Product': 'Damaged Product',
            'Wrong Item Received': 'Wrong Item Received',
            'Quality Issues': 'Quality Issues',
            'Changed My Mind': 'Changed My Mind',
            'Other': 'Other'
        },
        inputPlaceholder: 'Select a reason⏷',
        showCancelButton: true,
        confirmButtonText: 'Next',
        cancelButtonText: 'Cancel',
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        inputValidator: (value) => {
            if (!value) {
                return 'You need to select a reason!';
            }
        }
    }).then((result) => {
        if (result.isConfirmed) {
            let selectedReason = result.value;

            if (selectedReason === 'Other') {
                Swal.fire({
                    title: 'Specify Your Reason ✍️',
                    input: 'text',
                    inputPlaceholder: 'Enter reason here...',
                    icon: 'info',
                    showCancelButton: true,
                    confirmButtonText: 'Submit',
                    cancelButtonText: 'Cancel',
                    confirmButtonColor: '#28a745',
                    cancelButtonColor: '#d33',
                    inputValidator: (value) => {
                        if (!value) {
                            return 'You need to provide a reason!';
                        }
                    }
                }).then((textResult) => {
                    if (textResult.isConfirmed) {
                        sendReturnItemRequest(orderId, productId, textResult.value);
                    }
                });
            } else {
                sendReturnItemRequest(orderId, productId, selectedReason);
            }
        }
    });
}

function sendReturnItemRequest(orderId, productId, returnReason) {
    fetch('/returnOrderItem', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ orderId, productId, returnReason })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            let message = 'Your return request for this item has been submitted.';
            if (data.message) {
                message += ` ${data.message}`;
            }
            Swal.fire({
                title: 'Return Requested ✅',
                text: message,
                icon: 'success',
                confirmButtonColor: '#28a745'
            }).then(() => {
                location.reload();
            });
        } else {
            Swal.fire({
                title: 'Error ❌',
                text: data.message || 'Something went wrong. Please try again.',
                icon: 'error',
                confirmButtonColor: '#d33'
            });
        }
    })
    .catch(error => {
        Swal.fire({
            title: 'Error ❌',
            text: 'Could not process the request.',
            icon: 'error',
            confirmButtonColor: '#d33'
        });
    });
}

const key = "rzp_test_YFWFrvVk0xexkK"; 

function retryPayment(orderId) {
  fetch(`/retryPayment/${orderId}`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
  })
    .then((response) => response.json())
    .then((data) => {
      if (!data.success) {
        Swal.fire({ icon: "error", title: "Error", text: data.message });
        return;
      }

      const razorpayOrder = data.order;

      let options = {
        key: key, 
        amount: razorpayOrder.amount,
        currency: "INR",
        name: "TickScape",
        description: "Order Payment Retry",
        order_id: razorpayOrder.id,
        handler: function (response) {
          verifyRetryPayment(response, orderId); 
        },
        prefill: {
          name: "TickScape",
          email: "tickscapeSupport@gmail.com",
          contact: "+91 7034316981",
        },
        theme: { color: "#088178" }, 
        modal: {
          ondismiss: function () {
            Swal.fire({
              icon: "warning",
              title: "Payment Cancelled",
              text: "You can retry payment later from the orders page.",
            });
          },
        },
      };

      let rzp = new window.Razorpay(options);
      rzp.open();
    })
    .catch((error) => {
      console.error("Retry Payment Error:", error);
      Swal.fire({ icon: "error", title: "Error", text: "Failed to retry payment." });
    });
}

function verifyRetryPayment(response, orderId) {
  fetch("/verifyRetryPayment", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      order_id: response.razorpay_order_id,
      payment_id: response.razorpay_payment_id,
      signature: response.razorpay_signature,
      orderId: orderId, 
    }),
  })
    .then((res) => res.json())
    .then((data) => {
      if (data.success) {
        Swal.fire({
          icon: "success",
          title: "Payment Successful!",
          text: "Your order has been confirmed.",
        }).then(() => {
            const customOrderId = data.order.orderId;
            window.location.href = `/orderDetails?orderId=${customOrderId}`;
        });
      } else {
        Swal.fire({ icon: "error", title: "Error", text: data.message });
      }
    })
    .catch((error) => {
      console.error("Payment Verification Error:", error);
      Swal.fire({ icon: "error", title: "Error", text: "Payment verification failed." });
    });
}

</script>
<%- include("../../views/partials/user/footer") %>
