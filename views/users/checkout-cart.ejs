<%- include("../../views/partials/user/header") %>


<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">

<style>
  body {
    font-family: 'Roboto', sans-serif;
    background-color: #f1f3f6;
    margin: 0;
    padding: 0;
  }

  .main {
    padding: 20px 0;
  }

  .page-header.breadcrumb-wrap {
    background-color: #fff;
    padding: 10px 0;
    border-bottom: 1px solid #eaeaec;
  }

  .breadcrumb a {
    color: #2874f0;
    text-decoration: none;
  }

  .breadcrumb a:hover {
    text-decoration: underline;
  }

  .breadcrumb span {
    margin: 0 5px;
    color: #878787;
  }


  .checkout-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 15px; 
  }


  .checkout-row {
    display: flex; 
    gap: 24px; 
  }

  .checkout-row > [class*="col-"] {
    margin-right: 0;
  }

  .checkout-row > .col-lg-8 {
    flex: 0 0 66.666667%; 
  }

  .checkout-row > .col-lg-4 {
    flex: 0 0 33.333333%; 
  }

  .checkout-left {
    background: #fff;
    border-radius: 4px;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    padding: 0;
  }

  .section-card {
    border-bottom: 1px solid #eaeaec;
    padding: 20px;
  }

  .section-card h3 {
    font-size: 18px;
    font-weight: 500;
    color: #212121;
    margin-bottom: 15px;
  }

  .section-card:last-child {
    border-bottom: none;
  }

  .table-shopping {
    width: 100%;
    border-collapse: collapse;
  }

  .table-shopping th,
  .table-shopping td {
    padding: 10px;
    text-align: left;
    border-bottom: 1px solid #eaeaec;
  }

  .table-shopping th {
    font-weight: 500;
    color: #878787;
    font-size: 14px;
  }

  .table-shopping td {
    color: #212121;
    font-size: 14px;
  }

  .product-img {
    width: 60px;
    height: 60px;
    object-fit: cover;
    border-radius: 4px;
  }

 
  .coupon-card {
    padding: 15px;
    border: 1px dashed #eaeaec;
    border-radius: 4px;
    background: #fff;
    margin-top: 15px;
  }

  .coupon-card .btn-sm {
    padding: 6px 12px;
    font-size: 12px;
  }

  .use-button {
    background-color: #2874f0;
    color: #fff;
    border: none;
    padding: 8px 16px;
    border-radius: 4px;
    transition: background-color 0.3s;
  }

  .use-button:hover {
    background-color: #1a5dc7;
  }

  .address-card {
    border: 1px solid #eaeaec;
    border-radius: 4px;
    padding: 15px;
    margin-bottom: 15px;
    background: #fff;
    transition: border-color 0.3s;
  }

  .address-card.selected {
    border-color: #2874f0;
    box-shadow: 0 0 5px rgba(40, 116, 240, 0.3);
  }

  .address-card .form-check-input {
    margin-right: 10px;
  }

  .address-card h5 {
    font-size: 16px;
    font-weight: 500;
    margin-bottom: 10px;
  }

  .address-card p {
    font-size: 14px;
    color: #212121;
    margin: 5px 0;
  }


  .address-actions {
    display: flex;
    justify-content: center;
    margin-top: 15px;
  }

  .address-actions .btn {
    width: auto;
  }


  .checkout-right {
    background: #fff;
    border-radius: 4px;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    padding: 20px;
    height: fit-content;
  }

  .price-details h4,
  .payment-method h3 {
    font-size: 16px;
    font-weight: 500;
    color: #212121;
    margin-bottom: 15px;
  }

  .price-details p {
    font-size: 14px;
    color: #878787;
    margin: 0 0 10px;
    display: flex;
    justify-content: space-between;
  }

  .price-details .total {
    font-size: 16px;
    font-weight: 500;
    color: #212121;
    border-top: 1px dashed #eaeaec;
    padding-top: 10px;
  }

  .payment-method .form-check {
    margin-bottom: 15px;
  }

  .payment-method .form-check-label {
    font-size: 14px;
    color: #212121;
    font-weight: 500;
  }

  .place-order-btn {
    background-color: #fb641b;
    color: #fff;
    border: none;
    padding: 12px;
    font-size: 16px;
    font-weight: 500;
    border-radius: 4px;
    width: 100%;
    transition: background-color 0.3s;
    margin-top: 20px;
  }

  .place-order-btn:hover {
    background-color: #e65100;
  }

  /* Modal Styling */
  .modal-content {
    border-radius: 4px;
  }

  .modal-header {
    background: #2874f0;
    color: #fff;
    border-radius: 4px 4px 0 0;
  }

  .modal-backdrop {
    display: none; 
  }


  @media (max-width: 991px) {
    .checkout-right {
      margin-top: 20px;
    }
    .checkout-row {
      flex-direction: column;
      gap: 0; 
    }
  }

  @media (max-width: 767px) {
    .table-shopping thead {
      display: none;
    }

    .table-shopping tr {
      display: block;
      border-bottom: 1px solid #eaeaec;
      padding: 10px;
      margin-bottom: 10px;
    }

    .table-shopping td {
      display: block;
      text-align: left;
      border: none;
    }

    .table-shopping td:before {
      content: attr(data-label);
      font-weight: 500;
      color: #878787;
      display: block;
      margin-bottom: 5px;
    }
  }


</style>

<main class="main">
  <div class="page-header breadcrumb-wrap">
    <div class="container">
      <div class="breadcrumb">
        <a href="/" rel="nofollow">Home</a>
        <span></span> <a href="/shop" rel="nofollow">Shop</a>
        <span></span> <a href="/cart" rel="nofollow">Cart</a>
        <span></span> Check Out
      </div>
    </div>
  </div>

  <section class="checkout-container mt-30">
    
    <div class="checkout-row">
   
      <div class="col-lg-8 checkout-left">
      
        <div class="section-card">
          <h3><i class="fa-solid fa-shopping-bag me-2"></i> Order Summary</h3>
          <table class="table-shopping">
            <thead>
              <tr>
                <th>Sl. No</th>
                <th>Image</th>
                <th>Product</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Total</th>
              </tr>
            </thead>
            <tbody>
              <% if (carts && carts.items && carts.items.length > 0) { %>
                <% carts.items.forEach((item, index) => { %>
                  <tr class="cart-item" data-product-id="<%= item.productId._id %>">
                    <td data-label="Sl. No"><%= index + 1 %></td>
                    <td data-label="Image">
                      <img src="<%= item.productId.productImage[0] %>" class="product-img" alt="<%= item.productId.productName %>">
                    </td>
                    <td data-label="Product"><%= item.productId.productName %></td>
                    <td data-label="Price">₹<%= item.productId.salePrice.toFixed(2) %></td>
                    <td data-label="Quantity"><%= item.quantity %></td>
                    <td data-label="Total">₹<%= item.totalPrice.toFixed(2) %></td>
                    <td><input type="hidden" id="productid" value="<%= item.productId._id %>"></td>
                  </tr>
                <% }) %>
              <% } else { %>
                <tr>
                  <td colspan="6">No products found</td>
                </tr>
              <% } %>
            </tbody>
          </table>

          <div class="coupon-card">
            <div class="d-flex justify-content-between align-items-center">
              <p class="coupon-name mb-0"><i class="fa-solid fa-tags me-2"></i> Have a coupon?</p>
              <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#couponPopup">
                Show Coupons
              </button>
            </div>
            <% if (appliedCoupon) { %>
              <div class="applied-coupon mt-3">
                <p class="<%= discount > 0 ? 'text-success' : 'text-danger' %>">
                  Coupon applied: <%= appliedCoupon.name %>
                  <span class="<%= discount > 0 ? 'text-success' : 'text-danger' %> fw-bold">
                    <%= discount > 0 ? `-₹${discount}` : ' (Invalid)' %>
                  </span>
                </p>
                <button id="removeCoupon" class="btn btn-danger btn-sm">Remove Coupon</button>
              </div>
            <% } else { %>
              <div class="d-flex mt-3">
                <input type="text" id="couponCode" class="form-control me-2" placeholder="Enter Coupon Code">
                <button id="applyCoupon" class="btn use-button">Apply</button>
              </div>
            <% } %>
          </div>
        </div>

        <div class="section-card">
          <h3><i class="fa-solid fa-map-marker-alt me-2"></i> Delivery Address</h3>
          <div class="row">
            <% if (address && address.length > 0) { %>
              <% address.forEach(function (userAddress) { %>
                <% userAddress.address.forEach(function (addr) { %>
                  <div class="col-md-6">
                    <div class="address-card">
                      <div class="form-check">
                        <input class="form-check-input" type="radio" id="addressRadio<%= addr._id %>" name="selectedAddress" value="<%= addr._id %>">
                        <label class="form-check-label" for="addressRadio<%= addr._id %>">
                          <h5><%= addr.addressType %></h5>
                        </label>
                      </div>
                      <p><%= addr.name %></p>
                      <p><%= addr.city %>, <%= addr.landMark %>, <%= addr.state %>, <%= addr.pincode %></p>
                      <p>Phone: <%= addr.phone %>, Alt: <%= addr.altPhone || 'N/A' %></p>
                      <div class="d-flex gap-2">
                        <a href="/editAddress?id=<%= addr._id %>&redirectTo=checkout" class="btn btn-sm btn-outline-primary">Edit</a>
                        <a href="javascript:void(0);" class="btn btn-sm btn-outline-danger delete-btn" data-id="<%= addr._id %>" data-redirect="checkout">Delete</a>
                      </div>
                    </div>
                  </div>
                <% }) %>
              <% }) %>
            <% } else { %>
              <div class="col-12">
                <p>No address available</p>
              </div>
            <% } %>
            
            <div class="col-12 address-actions">
              <a href="/addAddress?redirectTo=checkout" class="btn btn-outline-primary">
                <i class="fa-solid fa-plus me-2"></i> Add New Address
              </a>
            </div>
          </div>
        </div>
      </div>

      <div class="col-lg-4 checkout-right">
        <div class="price-details">
          <h4>Price Details</h4>
          <p>Total <span>₹<%= total || 0 %></span></p>
          <p>GST (CGST: <%= cgstRate || 0 %>%, SGST: <%= sgstRate || 0 %>%) <span>₹<%= gstAmount ? gstAmount.toFixed(2) : '0.00' %></span></p>
          <p>Shipping Charge <span>₹50</span></p>
          <p>Discount <span id="discount-display">-₹<%= discount || 0 %></span></p>
          <p class="total">Total Amount <span>₹<%= (total + 50 + (gstAmount || 0) - (discount || 0)).toFixed(2) %></span></p>
        </div>

        <div class="section-card payment-method mt-4">
          <h3><i class="fa-solid fa-credit-card me-2"></i> Payment Options</h3>
          <div class="form-check">
            <input class="form-check-input" type="radio" id="paymentMethodCOD" name="paymentMethod" value="Cash on Delivery">
            <label class="form-check-label" for="paymentMethodCOD"><i class="fa-solid fa-truck me-2"></i> Cash on Delivery</label>
          </div>
          <div class="form-check">
            <input class="form-check-input" type="radio" id="Onlinepayment" name="paymentMethod" value="Online Payment">
            <label class="form-check-label" for="Onlinepayment"><i class="fa-solid fa-credit-card me-2"></i> Online Payment (via Razorpay)</label>
          </div>
          <div class="form-check">
            <input class="form-check-input" type="radio" id="paymentWallet" name="paymentMethod" value="Wallet">
            <label class="form-check-label" for="paymentWallet"><i class="fa-solid fa-wallet me-2"></i> Wallet</label>
          </div>
        </div>

        <button class="place-order-btn mt-3" id="placeorder" onclick="placeOrder('')">
          <i class="fa-solid fa-shopping-cart me-2"></i> Place Order
        </button>
      </div>
    </div>
  </section>

  <div id="couponPopup" class="modal fade" tabindex="-1">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Available Coupons</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <% if (coupons && coupons.length > 0) { %>
            <table class="table table-bordered text-center">
              <thead>
                <tr>
                  <th>Coupon Code</th>
                  <th>Discount</th>
                  <th>Min Purchase</th>
                  <th>Action</th>
                </tr>
              </thead>
              <tbody>
                <% coupons.forEach(coupon => { %>
                  <tr>
                    <td><strong class="coupon-code"><%= coupon.name %></strong></td>
                    <td>₹<%= coupon.offerPrice || 0 %></td>
                    <td>₹<%= coupon.minimumPrice || 0 %></td>
                    <td>
                      <button class="btn btn-sm btn-primary copy-btn" data-code="<%= coupon.name %>">Copy Code</button>
                    </td>
                  </tr>
                <% }) %>
              </tbody>
            </table>
          <% } else { %>
            <p class="text-center">No coupons available.</p>
          <% } %>
        </div>
      </div>
    </div>
  </div>
</main>


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>

document.addEventListener("DOMContentLoaded", function () {
  document.querySelectorAll(".delete-btn").forEach((button) => {
    button.addEventListener("click", function () {
      const addressId = this.getAttribute("data-id");
      const redirectTo = this.getAttribute("data-redirect");

      Swal.fire({
        title: "Are you sure?",
        text: "You won't be able to recover this address!",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#d33",
        cancelButtonColor: "#3085d6",
        confirmButtonText: "Yes, delete it!"
      }).then((result) => {
        if (result.isConfirmed) {
          fetch(`/deleteAddress?id=${addressId}&redirectTo=${redirectTo}`, {
            method: "DELETE"
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              Swal.fire("Deleted!", "Your address has been removed.", "success");
              button.closest(".col-md-6").remove();
              if (redirectTo === "checkout") {
                setTimeout(() => window.location.href = "/checkout", 500);
              }
            } else {
              Swal.fire("Error!", data.message || "Something went wrong.", "error");
            }
          })
          .catch(error => {
            console.error("Delete Address Error:", error);
            Swal.fire("Error!", "Failed to delete address.", "error");
          });
        }
      });
    });
  });

  document.querySelectorAll(".copy-btn").forEach(button => {
    button.addEventListener("click", function () {
      const couponCode = this.getAttribute("data-code");
      navigator.clipboard.writeText(couponCode)
        .then(() => {
          
          const modalElement = document.getElementById("couponPopup");
          const bootstrapModal = bootstrap.Modal.getInstance(modalElement);
          bootstrapModal.hide();

          document.body.classList.remove('modal-open');
          const backdrop = document.querySelector('.modal-backdrop');
          if (backdrop) {
            backdrop.remove();
          }

          alert(`Coupon code "${couponCode}" copied.`);

          document.getElementById("couponCode").focus();
        })
        .catch(err => {
          console.error("Copy Error:", err);
          Swal.fire("Error!", "Failed to copy the coupon code.", "error");
        });
    });
  });
});


const key = "rzp_test_YFWFrvVk0xexkK";

function placeOrder(paymentId = null) {
  let orderedItems = [];
  let gstAmount = parseFloat(document.querySelector(".price-details p:nth-child(2) span")?.textContent.replace("₹", "").trim()) || 0;

  document.querySelectorAll(".cart-item").forEach(row => {
    let productId = row.querySelector("#productid")?.value;
    let quantity = parseInt(row.querySelector("td:nth-child(5)")?.textContent.trim()) || 0;
    let price = parseFloat(row.querySelector("td:nth-child(4)")?.textContent.replace("₹", "").trim()) || 0;
    let productTotal = parseFloat(row.querySelector("td:nth-child(6)")?.textContent.replace("₹", "").trim()) || 0;

    if (productId && quantity > 0) {
      orderedItems.push({ product: productId, quantity, price, totalPrice: productTotal });
    }
  });

  if (orderedItems.length === 0) {
    Swal.fire({ icon: 'error', title: 'Oops...', text: 'Your cart is empty!' });
    return;
  }

  let selectedAddress = document.querySelector('input[name="selectedAddress"]:checked')?.value;
  if (!selectedAddress) {
    Swal.fire({ icon: 'error', title: 'Oops...', text: 'Please select an address!' });
    return;
  }

  let paymentMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value;
  if (!paymentMethod) {
    Swal.fire({ icon: 'error', title: 'Oops...', text: 'Please select a payment method!' });
    return;
  }

  let totalPrice = orderedItems.reduce((sum, item) => sum + (item.totalPrice || 0), 0);
  let shipping = 50;
  let discount = parseFloat(document.querySelector("#discount-display")?.textContent.replace("-₹", "").trim()) || 0;
  let finalAmount = totalPrice + shipping - discount + gstAmount;

  if (isNaN(finalAmount) || finalAmount <= 0) {
    Swal.fire({ icon: 'error', title: 'Error', text: 'Invalid order total.' });
    return;
  }

  if (paymentMethod === "Cash on Delivery" && finalAmount > 1000) {
    Swal.fire({ icon: 'error', title: 'Oops...', text: 'COD not available for orders above ₹1000.' });
    return;
  }

  if (paymentMethod === "Wallet") {
    fetch("/getUserWalletBalance")
      .then(response => response.json())
      .then(walletData => {
        if (!walletData || walletData.wallet === undefined) {
          Swal.fire({ icon: 'error', title: 'Error', text: 'Unable to fetch wallet balance.' });
          return;
        }
        let walletBalance = walletData.wallet;
        if (walletBalance < finalAmount) {
          Swal.fire({ icon: 'error', title: 'Insufficient Wallet Balance', text: 'Please select another payment method.' });
          return;
        }
        fetch("/deductWalletBalance", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ amount: finalAmount })
        })
        .then(res => res.json())
        .then(deductionResponse => {
          if (deductionResponse.success) {
            processOrder(paymentMethod, paymentId, orderedItems, totalPrice, gstAmount, discount, shipping, finalAmount, selectedAddress);
          } else {
            Swal.fire({ icon: 'error', title: 'Error', text: 'Failed to deduct wallet balance.' });
          }
        });
      });
    return;
  }

  if (paymentMethod === "Online Payment" && !paymentId) {
    initiatePayment(orderedItems, totalPrice, gstAmount, discount, shipping, finalAmount, selectedAddress);
    return;
  }

  processOrder(paymentMethod, paymentId, orderedItems, totalPrice, gstAmount, discount, shipping, finalAmount, selectedAddress);
}

function processOrder(paymentMethod, paymentId, orderedItems, totalPrice, gstAmount, discount, shipping, finalAmount, selectedAddress) {
  fetch("/placeOrder", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      orderedItems,
      totalPrice,
      gstAmount,
      discount,
      shipping,
      finalAmount,
      address: selectedAddress,
      status: "Order Placed",
      paymentMethod,
      paymentInfo: { paymentId: paymentMethod === "Online Payment" ? paymentId : null, status: paymentId ? 'Success' : 'Pending' }
    })
  })
  .then(response => response.json())
  .then(response => {
    if (response.success) {
      Swal.fire({ icon: 'success', title: 'Order Placed!', text: 'Your order has been successfully placed.' })
      .then(() => {
        const orderId = response.order?.orderId;
        if (orderId) window.location.href = `/orderDetails?orderId=${orderId}`;
      });
    } else {
      Swal.fire({ icon: 'error', title: 'Error', text: response.message || 'Failed to place order.' });
    }
  })
  .catch(error => {
    console.error("Order Error:", error);
    Swal.fire({ icon: 'error', title: 'Error', text: 'Something went wrong.' });
  });
}

function initiatePayment(orderedItems, totalPrice, gstAmount, discount, shipping, finalAmount, selectedAddress) {
  fetch("/razorpayPayment", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ addressId: selectedAddress, orderedItems, totalPrice, gstAmount, discount, shipping, finalAmount })
  })
  .then(response => response.json())
  .then(data => {
    if (!data.success) {
      Swal.fire({ icon: 'error', title: 'Error', text: data.message });
      return;
    }
    const razorpayOrder = data.order;
    let options = {
      key: key,
      amount: razorpayOrder.amount,
      currency: "INR",
      name: "TickScape",
      description: "Order Payment",
      order_id: razorpayOrder.id,
      handler: function (response) {
        verifyPayment(response);
      },
      prefill: { name: "TickScape", email: "tickscapeSupport@gmail.com", contact: "+91 7034316981" },
      theme: { color: "#3399cc" },
      modal: {
        ondismiss: function () {
          Swal.fire({
            title: "Payment Failed",
            text: "Your payment was not completed. What would you like to do?",
            icon: "warning",
            showCancelButton: true,
            showDenyButton: true,
            confirmButtonText: "Retry",
            denyButtonText: "Cancel Order",
            cancelButtonText: "Continue Shopping"
          }).then((result) => {
            if (result.isConfirmed) {
              initiatePayment(orderedItems, totalPrice, gstAmount, discount, shipping, finalAmount, selectedAddress);
            } else if (result.isDenied) {
              Swal.fire({ icon: 'info', title: 'Order Cancelled', text: 'Your order has been cancelled.' });
            } else if (result.isDismissed) {
              fetch("/savePendingOrder", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ addressId: selectedAddress })
              })
              .then(res => res.json())
              .then(data => {
                if (data.success) {
                  Swal.fire({ icon: "success", title: "Order Saved!", text: "Your order is pending payment." })
                  .then(() => window.location.href = `/orders`);
                } else {
                  Swal.fire({ icon: "error", title: "Error", text: data.message });
                }
              });
            }
          });
        }
      }
    };
    let rzp = new Razorpay(options);
    rzp.open();
  })
  .catch(error => {
    console.error("Razorpay Error:", error);
    Swal.fire({ icon: 'error', title: 'Error', text: 'Failed to initiate payment.' });
  });
}

function verifyPayment(response) {
  fetch("/verifyRazorpay", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      order_id: response.razorpay_order_id,
      payment_id: response.razorpay_payment_id,
      signature: response.razorpay_signature
    })
  })
  .then(res => res.json())
  .then(data => {
    if (data.success) {
      Swal.fire({ icon: 'success', title: 'Order Placed!', text: 'Your order has been successfully placed.' })
      .then(() => {
        const orderId = data.order.orderId;
        window.location.href = `/orderDetails?orderId=${orderId}`;
      });
    } else {
      Swal.fire({ icon: 'error', title: 'Error', text: data.message });
    }
  })
  .catch(error => {
    console.error("Verify Error:", error);
    Swal.fire({ icon: 'error', title: 'Error', text: 'Payment verification failed.' });
  });
}

$(document).on('click', '#applyCoupon', function() {
  let couponCode = $('#couponCode').val().trim();
  let carts = [];
  $('.cart-item').each(function() {
    let productId = $(this).data('product-id');
    let quantity = parseInt($(this).find('td:nth-child(5)').text().trim());
    let price = parseFloat($(this).find('td:nth-child(4)').text().replace("₹", ""));
    if (productId && quantity && price) {
      carts.push({ productId, quantity, price });
    }
  });

  if (!couponCode) {
    Swal.fire({ icon: 'warning', title: 'Oops...', text: 'Please enter a coupon code!' });
    return;
  }

  Swal.fire({
    title: 'Are you sure?',
    text: 'Do you want to apply this coupon?',
    icon: 'question',
    showCancelButton: true,
    confirmButtonText: 'Yes, apply it!',
    cancelButtonText: 'No, go back'
  }).then((result) => {
    if (result.isConfirmed) {
      $.ajax({
        url: '/apply-coupon',
        type: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({ couponCode, carts }),
        success: function(response) {
          if (response.success) {
            $('#discount-display').text(`-₹${response.couponDiscount}`);
            let shippingCharge = 50;
            let gstAmount = parseFloat(response.gstAmount) || 0;
            let subTotal = parseFloat(response.subTotal) || 0;
            let discount = parseFloat(response.couponDiscount) || 0;
            let finalAmount = subTotal + shippingCharge + gstAmount - discount;
            $('.price-details .total span').text(`₹${finalAmount.toFixed(2)}`);
            $('.applied-coupon').remove();
            $('.coupon-card').append(`
              <div class="applied-coupon mt-3">
                <p class="text-success">Coupon applied ${response.appliedCoupon.name}: <span class="text-success fw-bold">-₹${response.couponDiscount}</span></p>
                <button id="removeCoupon" class="btn btn-danger btn-sm">Remove Coupon</button>
              </div>
            `);
            $('#applyCoupon').hide();
            $('#couponCode').hide();
            Swal.fire({ icon: 'success', title: 'Coupon Applied!', text: response.message, timer: 2000 });
          } else {
            Swal.fire({ icon: 'error', title: 'Coupon Failed!', text: response.message });
          }
        },
        error: function(xhr, status, error) {
          console.error("Apply Coupon Error:", error);
          Swal.fire({ icon: 'error', title: 'Oops...', text: 'Something went wrong.' });
        }
      });
    } else {
      $('#couponCode').val('');
    }
  });
});

$(document).on('click', '#removeCoupon', function() {
  Swal.fire({
    title: 'Are you sure?',
    text: 'Do you want to remove this coupon?',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonText: 'Yes, remove it!',
    cancelButtonText: 'No, go back'
  }).then((result) => {
    if (result.isConfirmed) {
      $.ajax({
        url: '/remove-coupon',
        type: 'POST',
        success: function(response) {
          if (response.success) {
            let shippingCharge = 50;
            let gstAmount = parseFloat(response.gstAmount) || 0;
            let subTotal = parseFloat(response.subTotal) || 0;
            let finalAmount = subTotal + shippingCharge + gstAmount;
            $('#discount-display').text('-₹0');
            $('.price-details .total span').text(`₹${finalAmount.toFixed(2)}`);
            $('.applied-coupon').remove();
            $('#couponCode').val('');
            $('#couponCode').show();
            $('#applyCoupon').show();
            Swal.fire({ icon: 'success', title: 'Coupon Removed!', text: response.message, timer: 2000 });
          } else {
            Swal.fire({ icon: 'error', title: 'Coupon Not Removed!', text: response.message });
          }
        },
        error: function(xhr, status, error) {
          console.error("Remove Coupon Error:", error);
          Swal.fire({ icon: 'error', title: 'Oops...', text: 'Something went wrong.' });
        }
      });
    }
  });
});
</script>

<%- include("../../views/partials/user/footer") %>