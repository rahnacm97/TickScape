<%- include("../../views/partials/admin/header") %>

<head>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css" integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css" />
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">

  <style>
    body {
      font-family: 'Roboto', sans-serif;
      background-color: #f4f6f9;
      margin: 0;
      padding: 0;
    }

    .content-header {
      text-align: center;
      margin-top: 20px;
      margin-left: 20px;
    }

    .content-title {
      font-size: 28px;
      font-weight: 500;
      color: #333;
    }

    .container {
      max-width: 600px;
      background-color: #ffffff;
      padding: 30px;
      border-radius: 10px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
      margin: 50px auto;
    }

    .form-label {
      font-weight: 500;
      color: #333;
      display: block;
      margin-bottom: 8px;
    }

    .form-control {
      width: 100%;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 5px;
      box-sizing: border-box;
      font-size: 14px;
    }

    .btn-primary {
      background-color: #007bff;
      color: #fff;
      border: none;
      padding: 10px;
      font-size: 14px;
      margin-left: 100%;
      border-radius: 5px;
      cursor: pointer;
      width: 100%;
      transition: background 0.3s;
    }

    .btn-primary:hover {
      background-color: #0056b3;
    }

    .image-preview {
      text-align: center;
      margin: 20px 0;
      position: relative;
    }

    .image-preview img {
      width: 100%;
      max-width: 250px;
      height: auto;
      border-radius: 5px;
      object-fit: cover;
      border: 1px solid #ddd;
    }

    .delete-icon {
      position: absolute;
      top: 5px;
      right: 150px;
      cursor: pointer;
      color: red;
      font-size: 18px;
      background: white;
      border-radius: 50%;
      padding: 3px;
    }

    .error-message {
      color: red;
      font-size: 12px;
      margin-top: 5px;
    }
  </style>
</head>

<body>
  <div class="content-header">
    <h2 class="content-title">Update Brand</h2>
  </div>

  <div class="container">
    <form method="post" action="/admin/editBrand/<%= brand._id %>" onsubmit="return validateForm()">
      <div class="mb-4">
        <label for="brandName" class="form-label">Brand Name</label>
        <input type="text" name="brandName" value="<%= brand.brandName %>" class="form-control" />
        <span id="nameError" class="error-message"></span>
      </div>

      <div class="image-preview">
        <img src="http://localhost:3000/uploads/product-images/<%= brand.brandImage[0] %>" alt="Brand Image">
        <i onclick="deleteSingleImage('<%= brand.brandImage[0] %>', '<%= brand._id %>')" class="fa-regular fa-circle-xmark delete-icon"></i>
      </div>

      <div class="mb-4">
        <label class="form-label">Choose Another Logo</label>
        <span id="imageError" class="error-message"></span>
      </div>

      <div class="col-lg-4">
        <div class="mb-4">
          <input name="images" type="file" id="upload" multiple onchange="handleImage(event)" />

          <div id="cropperContainers"></div>

          <div id="cropperContainer1" class="crop-container" style="display: none;">
            <img id="cropImage1" alt="Image to crop">
            <button type="button" id="saveButton1" class="btn btn-primary mt-2">Save Cropped Image</button>
          </div>
        </div>
        <button class="btn btn-primary" type="submit">Update Brand</button>
      </div>
    </form>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>

  <script>
    let croppers = {};  // Object to store the cropper instances
    let croppedImages = [];  // Array to store the cropped image blobs

    const handleImage = (e) => {
      const files = e.target.files;  // Get the selected files
      console.log("Selected Files: ", files);

      // Clear any existing cropper containers
      const cropperContainers = document.getElementById("cropperContainers");
      cropperContainers.innerHTML = "";

      // Iterate through the selected files
      for (let i = 0; i < files.length; i++) {
        const file = files[i];
        const reader = new FileReader();

        // Create a new cropper container dynamically
        const cropperContainer = document.createElement('div');
        cropperContainer.id = `cropperContainer${i}`;
        cropperContainer.style.marginBottom = "20px";  // Styling for separation
        cropperContainers.appendChild(cropperContainer);

        // Create an image element for previewing the selected image
        const img = document.createElement('img');
        img.id = `cropImage${i}`;
        img.style.width = '300px';
        img.style.height = '200px';
        cropperContainer.appendChild(img);

        const saveButton = document.createElement('button');
        saveButton.textContent = 'Save Cropped Image';
        saveButton.id = `saveButton${i}`;
        saveButton.setAttribute("type", "button");
        cropperContainer.appendChild(saveButton);

        // Read the file as data URL
        reader.onload = function () {
          img.src = reader.result;

          // Initialize the cropper for this image
          if (croppers[i]) {
            croppers[i].destroy();  // Destroy any existing cropper before initializing a new one
          }

          croppers[i] = new Cropper(img, {
            aspectRatio: 1,  // Maintain a square aspect ratio
            viewMode: 1,
            autoCropArea: 1,
          });

          // Handle the "Save Cropped Image" button click event
          saveButton.onclick = function () {
            const croppedCanvas = croppers[i].getCroppedCanvas({
              width: 600,
              height: 600
            });

            // Get the file extension from the uploaded image
            const fileExtension = file.name.split('.').pop();  // Extract file extension (e.g., jpg, png, etc.)

            // Compress and convert the cropped image to a Blob
            croppedCanvas.toBlob(function (blob) {
              const url = URL.createObjectURL(blob);

              // If the image is already cropped, replace the preview with the new cropped image
              img.src = url;  // Replace the preview with the new cropped image

              img.dataset.blob = blob;  // Store the Blob for future submission (e.g., sending to the backend)

              // Push the cropped image Blob to the array
              croppedImages.push(blob);
              console.log("Cropped Images Array: ", croppedImages);

              // Display the cropped image
              const croppedImagePreview = document.createElement('img');
              croppedImagePreview.src = url;
              croppedImagePreview.style.width = '200px';
              croppedImagePreview.style.height = '200px';
              cropperContainer.appendChild(croppedImagePreview);

              // Hide the cropper container (or remove it)
              cropperContainer.innerHTML = '';  // Clear the cropper UI
              cropperContainer.appendChild(croppedImagePreview);  // Only show the cropped image

              // Add a button to allow re-cropping the cropped image
              const reCropButton = document.createElement('button');
              reCropButton.textContent = 'Re-Crop This Image';
              reCropButton.setAttribute("type", "button");
              cropperContainer.appendChild(reCropButton);

              // Handle re-cropping the cropped image
              reCropButton.onclick = function () {
                // Replace the cropped image with the cropper again
                img.src = url;  // Use the cropped image as the source for re-cropping

                // Destroy the previous cropper instance
                croppers[i].destroy();

                // Re-initialize the cropper with the cropped image
                croppers[i] = new Cropper(img, {
                  aspectRatio: 1,  // Maintain a square aspect ratio
                  viewMode: 1,
                  autoCropArea: 1,
                });

                // Clear the cropped image preview and display the cropper again
                cropperContainer.innerHTML = '';  // Clear the cropped image preview
                cropperContainer.appendChild(img);  // Add the image back
                cropperContainer.appendChild(saveButton);  // Re-add the save button
              };
            }, `image/${fileExtension}`, 0.7); // 0.7 is the quality level for compression
          };
        };
        reader.readAsDataURL(file);  // Trigger the file reader
      }
    };

    const validateForm = () => {
      const brandName = document.querySelector('input[name="brandName"]').value;
      const nameError = document.getElementById("nameError");

      if (!brandName.trim()) {
        nameError.textContent = "Brand Name is required.";
        return false;
      }

      nameError.textContent = "";

      if (croppedImages.length === 0) {
        document.getElementById("imageError").textContent = "Image is required.";
        return false;
      }

      return true;
    };

    const deleteSingleImage = (image, brandId) => {
      // Add your image delete functionality here
    };
  </script>
</body>
