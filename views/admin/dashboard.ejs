<%- include("../../views/partials/admin/header") %>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
<script src="https://cdn.tailwindcss.com"></script>
<style>
body {
    font-family: 'Roboto', sans-serif;
    background-color: #f4f6f9;
    margin: 0;
    padding: 0;
}

/* Header */
.content-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px;
    background-color: #f6f7f9;
    border-radius: 5px;
}

/* Title */
.content-title {
    font-size: 28px;
    font-weight: 700;
    color: #333;
    margin: 0;
}

/* Dashboard Image */
.content-main img {
    width: 100%;
    max-width: 1100px;
    display: block;
    margin: 20px auto;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    transition: transform 0.3s ease-in-out;
}

.content-main img:hover {
    transform: scale(1.02);
}

/* Buttons */
button {
    cursor: pointer;
    border: none;
    padding: 12px 16px;
    font-size: 16px;
    font-weight: bold;
    color: white;
    border-radius: 8px;
    transition: 0.3s ease-in-out;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
}

button:hover {
    opacity: 0.85;
    transform: translateY(-2px);
}


/* Responsive Design */
@media (max-width: 1024px) {
    .content-header {
        flex-direction: column;
        text-align: center;
        padding: 10px;
    }

    .content-title {
        font-size: 24px;
    }
}

@media (max-width: 768px) {
    .content-header {
        flex-direction: column;
        text-align: center;
    }

    .content-main img {
        width: 95%;
        margin: 15px auto;
    }

    .grid {
        grid-template-columns: 1fr;
    }

    button {
        width: 100%;
    }
}

.user-count {
    font-size: 1rem; 
    font-weight: bold; 
    color: #06136c; 
}

</style>
<section class="content-main">
    <div class="content-header">
        <div>
            <h2 class="content-title card-title">Dashboard </h2>
        </div>
       
    </div>   
          <!-- Cards -->
          <div id="cardForm" class="grid gap-6 mb-8 md:grid-cols-1 xl:grid-cols-4">
            <!-- Metric Card Template -->
            <div class="flex items-center p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800">
              <div class="p-3 mr-4 text-orange-500 bg-orange-100 rounded-full dark:text-orange-100 dark:bg-orange-500">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3zM6 8a2 2 0 11-4 0 2 2 0 014 0zM16 18v-3a5.972 5.972 0 00-.75-2.906A3.005 3.005 0 0119 15v3h-3zM4.75 12.094A5.973 5.973 0 004 15v3H1v-3a3 3 0 013.75-2.906z"></path>
                </svg>
              </div>
              <p class="text-sm font-medium text-gray-600 dark:text-gray-400">
                Total clients: <span class="user-count" id="userCount"><%= userCount %></span>
              </p>
            </div>
          
            <!-- Total Sales -->
            <div class="flex items-center p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800">
              <div class="p-3 mr-4 text-green-500 bg-green-100 rounded-full dark:text-green-100 dark:bg-green-500">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M4 4a2 2 0 00-2 2v4a2 2 0 002 2V6h10a2 2 0 00-2-2H4zm2 6a2 2 0 012-2h8a2 2 0 012 2v4a2 2 0 01-2 2H8a2 2 0 01-2-2v-4zm6 4a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"></path>
                </svg>
              </div>
              <p class="text-sm font-medium text-gray-600 dark:text-gray-400">
                Total Sales: <span class="user-count" id="totalAmount">₹<%= orders.totalAmount %></span>
              </p>
            </div>
            
            <!-- Total Orders -->
            <div class="flex items-center p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800">
              <div class="p-3 mr-4 text-blue-500 bg-blue-100 rounded-full dark:text-blue-100 dark:bg-blue-500">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M3 1a1 1 0 000 2h1.22l.305 1.222a.997.997 0 00.01.042l1.358 5.43-.893.892C3.74 11.846 4.632 14 6.414 14H15a1 1 0 000-2H6.414l1-1H14a1 1 0 00.894-.553l3-6A1 1 0 0017 3H6.28l-.31-1.243A1 1 0 005 1H3zM16 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM6.5 18a1.5 1.5 0 100-3 1.5 1.5 0 000 3z"></path>
                </svg>
              </div>
              <p class="text-sm font-medium text-gray-600 dark:text-gray-400">
                Total Orders: <span class="user-count" id="totalOrder"><%= orders.totalOrder %></span>
              </p>
            </div>
          
            <!-- Items Sold -->
            <div class="flex items-center p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800">
              <div class="p-3 mr-4 text-purple-500 bg-blue-100 rounded-full dark:text-blue-100 dark:bg-blue-500">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M3 2a1 1 0 011 1v1h12V3a1 1 0 112 0v1h1a1 1 0 011 1v13a1 1 0 01-1 1H4a1 1 0 01-1-1V6a1 1 0 011-1h1V3a1 1 0 011-1zm4 1h8v1H7V3zM4 6v11h12V6H4z" clip-rule="evenodd"></path>
                </svg>
              </div>
              <p class="text-sm font-medium text-gray-600 dark:text-gray-400">
                Item Sold: <span class="user-count" id="itemSold"><%= orders.itemSold %></span>
              </p>
            </div>
          
            <!-- Total Coupons Applied -->
            <div class="flex items-center p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800">
              <div class="p-3 mr-4 text-blue-500 bg-blue-100 rounded-full dark:text-blue-100 dark:bg-blue-500">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M2 5a2 2 0 012-2h12a2 2 0 012 2v2.5a1.5 1.5 0 010 3V15a2 2 0 01-2 2H4a2 2 0 01-2-2v-2.5a1.5 1.5 0 010-3V5zm4 3a1 1 0 100 2 1 1 0 000-2zm6 0a1 1 0 100 2 1 1 0 000-2z" clip-rule="evenodd"></path>
                </svg>
              </div>
              <p class="text-sm font-medium text-gray-600 dark:text-gray-400">
                Total Coupons Applied: <span class="user-count" id="totalCouponUsers"><%= totalCouponUsers %></span>
              </p>
            </div>
          
            <!-- Total Discount Price -->
            <div class="flex items-center p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800">
              <div class="p-3 mr-4 text-green-500 bg-blue-100 rounded-full dark:text-blue-100 dark:bg-blue-500">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M3 7a4 4 0 014-4h10a2 2 0 012 2v10a4 4 0 01-4 4H5a2 2 0 01-2-2V7zm6.293 5.707a1 1 0 001.414 0l5-5a1 1 0 00-1.414-1.414l-5 5a1 1 0 000 1.414zM7.5 9a1.5 1.5 0 110-3 1.5 1.5 0 010 3zm7 7a1.5 1.5 0 110-3 1.5 1.5 0 010 3z" clip-rule="evenodd"></path>
                </svg>
              </div>
              <p class="text-sm font-medium text-gray-600 dark:text-gray-400">
                Total Discount Price: <span class="user-count" id="totalDiscount">₹<%= orders.totalDiscountPrice %></span>
              </p>
            </div>
          
            <!-- Pending Orders -->
            <div class="flex items-center p-4 bg-white rounded-lg shadow-xs dark:bg-red-800">
              <div class="p-3 mr-4 text-red-500 bg-teal-100 rounded-full dark:text-teal-100 dark:bg-teal-500">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M10 2a8 8 0 100 16 8 8 0 000-16zm0 14a6 6 0 110-12 6 6 0 010 12zM10 4a1 1 0 011 1v4.586l3.707 3.707a1 1 0 11-1.414 1.414L10 9.414V5a1 1 0 011-1z" clip-rule="evenodd"></path>
                </svg>
              </div>
              <p class="text-sm font-medium text-gray-600 dark:text-gray-400">
                Pending Orders: <span class="user-count" id="processingOrders"><%= processingOrders %></span>
              </p>
            </div>
          </div>

          <form id="dateForm" class="flex flex-wrap items-center gap-4 mb-6">
            <label for="orderDate" class="text-black font-serif text-lg">Select Date:</label>
          
            <input type="date" id="startDate" name="startDate" 
                   class="px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
          
            <span class="font-semibold text-lg">To</span>
          
            <input type="date" id="endDate" name="endDate" 
                   class="px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
          
            <button type="submit" 
                    class="px-4 py-2 bg-green-600 text-white font-semibold rounded-md hover:bg-green-700 transition">
              Filter
            </button>
          </form>
          
          <div>
            <div style="display: flex; justify-content: end; gap: 20px; margin-top: 10px; margin-bottom: 20px;">
              <button id="download" 
                  style="background-color: rgb(9, 115, 9); padding: 10px; border-radius: 15px; color: white;">
                  Download Report <i class="fa fa-file-excel" style="color: white;"></i>
              </button> 
          
              <button id="downloadPdf" 
                  style="background-color: rgb(210, 27, 27); padding: 10px; border-radius: 15px; color: white; ">
                  Download PDF <i class="fa fa-file-pdf" style="color: white;"></i>
              </button>
              <input type="hidden" id="resultData" />
            </div>
          </div> 

          <!-- New Table -->
          <div class="w-full overflow-x-auto rounded-lg shadow-md bg-white dark:bg-gray-800">
            <table class="w-full min-w-max table-auto text-left border-collapse">
              <!-- Table Head -->
              <thead>
                <tr class="bg-gray-500 dark:bg-gray-900 text-gray-800 dark:text-white-300 text-xs uppercase font-semibold tracking-wide">
                  <th class="px-4 py-3 text-center">Sl. No</th>
                  <th class="px-4 py-3">Order ID</th>
                  <th class="px-4 py-3">Quantity</th>
                  <th class="px-4 py-3">Amount</th>
                  <th class="px-4 py-3">Payment Method</th>
                  <th class="px-4 py-3">Status</th>
                  <th class="px-4 py-3">Date</th>
                </tr>
              </thead>
          
              <!-- Table Body -->
              <tbody id="ordersTableBody" class="text-gray-700 dark:text-gray-300 text-sm divide-y dark:divide-gray-700">
                <% if (order.length > 0) { %>
                  <% order.forEach((ordr, index) => { %>
                    <tr class="hover:bg-gray-50 dark:hover:bg-gray-900">
                      <td class="px-4 py-3 text-center font-medium"><%= (currentPage - 1) * limit + index + 1 %></td>
                      <td class="px-4 py-3 font-semibold"><%= ordr._id %></td>
                      <td class="px-4 py-3 text-center"><%= ordr.orderedItems
                        .filter(item => item.orderStatus !== "Returned" && item.orderStatus !== "Cancelled")
                        .reduce((sum, item) => sum + item.quantity, 0) %></td>
                      <td class="px-4 py-3 text-sm">₹<%= ordr.finalAmount || '0' %></td>
                      <td class="px-4 py-3 text-sm"><%= ordr.paymentMethod || '0' %></td>
                      <td class="px-4 py-3 text-xs">
                        <span class="px-2 py-1 font-semibold leading-tight rounded-full 
                          <%= getStatusClass(ordr.status) %>">
                          <%= ordr.status %>
                        </span>
                      </td>
                      <td class="px-4 py-3 text-sm"><%= ordr.invoiceDate ? new Date(ordr.invoiceDate).toLocaleDateString('en-US', {
                        year: 'numeric', month: 'long', day: 'numeric'
                      }) : 'N/A' %></td>
                    </tr>
                  <% }); %>
                <% } else { %>
                  <tr>
                    <td colspan="7" class="px-4 py-3 text-center text-gray-500 dark:text-gray-400">No orders found</td>
                  </tr>
                <% } %>
              </tbody>              
            </table>
          </div>

          <!-- Pagination -->            
          <div class="flex justify-center items-center space-x-2 mt-4 mb-4">
            <% if (currentPage > 1) { %>
                <a href="?page=<%= currentPage - 1 %>&startDate=<%= startDate %>&endDate=<%= endDate %>"
                   class="px-3 py-2 text-sm font-medium text-gray-600 bg-white border border-gray-300 rounded-md hover:bg-gray-100 dark:text-gray-300 dark:bg-gray-800 dark:border-gray-600 dark:hover:bg-gray-700">
                    &laquo; Previous
                </a>
            <% } else { %>
                <span class="px-3 py-2 text-sm font-medium text-gray-400 bg-gray-200 border border-gray-300 rounded-md cursor-not-allowed dark:bg-gray-700 dark:text-gray-500">
                    &laquo; Previous
                </span>
            <% } %>
        
            <% for (let i = 1; i <= totalPage; i++) { %>
                <% if (i === currentPage) { %>
                    <span class="px-3 py-2 text-sm font-medium text-white bg-green-600 border border-blue-600 rounded-md dark:bg-blue-500 dark:border-blue-500">
                        <%= i %>
                    </span>
                <% } else { %>
                    <a href="?page=<%= i %>&startDate=<%= startDate %>&endDate=<%= endDate %>"
                       class="px-3 py-2 text-sm font-medium text-gray-600 bg-white border border-gray-300 rounded-md hover:bg-gray-100 dark:text-gray-300 dark:bg-gray-800 dark:border-gray-600 dark:hover:bg-gray-700">
                        <%= i %>
                    </a>
                <% } %>
            <% } %>
        
            <% if (currentPage < totalPage) { %>
                <a href="?page=<%= currentPage + 1 %>&startDate=<%= startDate %>&endDate=<%= endDate %>"
                   class="px-3 py-2 text-sm font-medium text-gray-600 bg-white border border-gray-300 rounded-md hover:bg-gray-100 dark:text-gray-300 dark:bg-gray-800 dark:border-gray-600 dark:hover:bg-gray-700">
                    Next &raquo;
                </a>
            <% } else { %>
                <span class="px-3 py-2 text-sm font-medium text-gray-400 bg-gray-200 border border-gray-300 rounded-md cursor-not-allowed dark:bg-gray-700 dark:text-gray-500">
                    Next &raquo;
                </span>
            <% } %>
        </div> 
              
    </div>


          <h2 class="text-xl md:text-2xl font-semibold text-center text-gray-800 bg-gray-300 px-6 py-4 rounded-md shadow-md"
    style="font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;">
    TOP 5 ORDERED PRODUCTS AND CATEGORIES
</h2>

<div class="grid gap-6 mb-8 md:grid-cols-2">
    <!-- Products Table -->
    <div class="w-full overflow-hidden rounded-lg shadow-lg">
        <table class="w-full border border-gray-300 bg-white">
            <thead>
                <tr class="bg-gray-700 text-white">
                    <th class="px-6 py-3 text-left">No</th>
                    <th class="px-6 py-3 text-left">Name</th>
                    <th class="px-6 py-3 text-left">Sales Count</th>
                </tr>
            </thead>
            <tbody>
                <% if (products && products.length > 0) { %>
                    <% products.forEach((item, index) => { %>
                        <tr class="border-b hover:bg-gray-100">
                            <td class="px-6 py-4 text-gray-700 text-sm"><%= index + 1 %></td>
                            <td class="px-6 py-4 text-gray-700 text-sm font-medium"><%= item.name %></td>
                            <td class="px-6 py-4 text-gray-700 text-sm font-semibold"><%= item.orderCount %></td>
                        </tr>
                    <% }) %>
                <% } else { %>
                    <tr>
                        <td colspan="3" class="text-center py-4 text-gray-500">No products found</td>
                    </tr>
                <% } %>
            </tbody>
        </table>
    </div>

    <!-- Categories Table -->
    <div class="w-full overflow-hidden rounded-lg shadow-lg">
        <table class="w-full border border-gray-300 bg-white">
            <thead>
                <tr class="bg-gray-700 text-white">
                    <th class="px-6 py-3 text-left">No</th>
                    <th class="px-6 py-3 text-left">Name</th>
                    <th class="px-6 py-3 text-left">Sales Count</th>
                </tr>
            </thead>
            <tbody>
                <% if (category && category.length > 0) { %>
                    <% category.forEach((item, index) => { %>
                        <tr class="border-b hover:bg-gray-100">
                            <td class="px-6 py-4 text-gray-700 text-sm"><%= index + 1 %></td>
                            <td class="px-6 py-4 text-gray-700 text-sm font-medium"><%= item.categoryName %></td>
                            <td class="px-6 py-4 text-gray-700 text-sm font-semibold"><%= item.categoryCount %></td>
                        </tr>
                    <% }) %>
                <% } else { %>
                    <tr>
                        <td colspan="3" class="text-center py-4 text-gray-500">No categories found</td>
                    </tr>
                <% } %>
            </tbody>
        </table>
    </div>
</div>


          <!-- Charts -->
          <h2
              class="my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200"
            >
              Charts
            </h2>
            <div class="grid gap-6 mb-8 md:grid-cols-2">
            <select id="filter" onchange="updateChart()">
              <option value="yearly">Yearly</option>
              <option value="monthly">Monthly</option>
              <option value="weekly">Weekly</option>
          </select>
          </div>
          <div class="grid gap-6 mb-8">
            <div class="min-w-0 p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800">
              <h4 class="mb-4 font-semibold text-gray-800 dark:text-gray-300">
                Traffic
              </h4>
              <canvas id="line"></canvas>
              <div class="flex justify-center mt-4 space-x-3 text-sm text-gray-600 dark:text-gray-400">
                <!-- Chart legend -->
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
</div>
<% 
  function getStatusClass(status) {
    switch (status) {
      case 'Order Placed': return 'text-blue-700 bg-blue-100 dark:bg-blue-700 dark:text-blue-100';
      case 'Processing': return 'text-yellow-700 bg-yellow-100 dark:bg-yellow-700 dark:text-yellow-100';
      case 'Shipped': return 'text-purple-700 bg-purple-100 dark:bg-purple-700 dark:text-purple-100';
      case 'Out for Delivery': return 'text-orange-700 bg-orange-100 dark:bg-orange-700 dark:text-orange-100';
      case 'Delivered': return 'text-green-700 bg-green-100 dark:bg-green-700 dark:text-green-100';
      case 'Cancelled': return 'text-red-700 bg-red-100 dark:bg-red-700 dark:text-red-100';
      case 'Return request': return 'text-pink-700 bg-pink-100 dark:bg-pink-700 dark:text-pink-100';
      default: return 'text-gray-700 bg-gray-100 dark:bg-gray-700 dark:text-gray-100';
    }
  }
%>

</section>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>

let result = null;
let eventListenersAdded = false;

document.addEventListener("DOMContentLoaded", () => {
    if (eventListenersAdded) {
        console.log("Event listeners already added");
        return;
    }

    console.log("DOMContentLoaded event fired");
    const downloadButton = document.getElementById("download");
    const downloadPdfButton = document.getElementById("downloadPdf");

    if (!downloadButton || !downloadPdfButton) {
        console.error("Download buttons not found in the DOM");
        return;
    }

    downloadButton.addEventListener("click", () => {
    console.log("Download button clicked");

    const startDate = document.getElementById("startDate").value;
    const endDate = document.getElementById("endDate").value;

    if (!startDate || !endDate) {
      
        Swal.fire({
            title: 'Warning',
            text: 'Please select both Start and End dates',
            icon: 'warning'
        });
        return; 
    }

    if (result) {
        
        downloadXlsx(result);
    } else {
       
        Swal.fire({
            title: 'Error',
            text: 'No data available to download. Please filter the report first.',
            icon: 'error'
        });
        console.error("No result data available to download.");
    }
});

downloadPdfButton.addEventListener("click", () => {
    console.log("Download PDF button clicked");

    const startDate = document.getElementById("startDate").value;
    const endDate = document.getElementById("endDate").value;

    if (!startDate || !endDate) {

        Swal.fire({
            title: 'Warning',
            text: 'Please select both Start and End dates',
            icon: 'warning'
        });
        return; 
    }

    if (result) {
       
        downloadPDF(result);
    } else {
       
        Swal.fire({
            title: 'Error',
            text: 'No data available to download. Please filter the report first.',
            icon: 'error'
        });
        console.error("No result data available to download.");
    }
});

    eventListenersAdded = true;
});

document.getElementById("dateForm").addEventListener("submit", async (e) => {
    e.preventDefault();
    const startDate = document.getElementById("startDate").value;
    const endDate = document.getElementById('endDate').value;

    if (!startDate || !endDate) {
        Swal.fire({
            icon: 'warning',
            title: 'Missing Dates',
            text: 'Please select both start and end dates!',
            confirmButtonColor: '#3085d6',
        });
        return;
    }

    if (new Date(startDate) > new Date(endDate)) {
        Swal.fire({
            icon: 'error',
            title: 'Invalid Date Range',
            text: 'The "From" date must be before the "To" date.',
            confirmButtonColor: '#d33',
        });
        return;
    }

    const startDatee = new Date(startDate).toISOString().split("T")[0];
    const endDatee = new Date(endDate).toISOString().split("T")[0];

    try {
        const response = await fetch(`/admin/salesReport?startDatee=${startDatee}&endDatee=${endDatee}&page=1`, {
            method: "GET",
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        result = await response.json();
        console.log("API Response:", result);

        updateTable(result);
        updatePagination(result);

    } catch (error) {
        console.error("Fetch error:", error);
    }
});

function updateTable(result) {
    const ordersTableBody = document.getElementById('ordersTableBody');
    ordersTableBody.innerHTML = '';

    if (result.order && result.order.length > 0) {
        result.order.forEach((ordr, index) => {
          const quantity = ordr.orderedItems
    .filter(item => item.orderStatus !== "Returned" && item.orderStatus !== "Cancelled")
    .reduce((sum, item) => sum + item.quantity, 0);

            const finalAmount = ordr.finalAmount || '0';
            const statusClass = getStatusClass(ordr.status);

            const row = `
                <tr class="hover:bg-gray-50 dark:hover:bg-gray-900">
                    <td class="px-4 py-3 text-center font-medium">${index + 1}</td>
                    <td class="px-4 py-3 font-semibold">${ordr._id}</td>
                    <td class="px-4 py-3 text-center">${quantity}</td>
                    <td class="px-4 py-3 text-sm">₹${finalAmount}</td>
                    <td class="px-4 py-3 text-sm">${ordr.paymentMethod || 'N/A'}</td>
                    <td class="px-4 py-3 text-xs">
                        <span class="px-2 py-1 font-semibold leading-tight rounded-full ${statusClass}">
                            ${ordr.status}
                        </span>
                    </td>
                    <td class="px-4 py-3 text-sm">
                        ${ordr.createdOn ? new Date(ordr.createdOn).toLocaleDateString('en-US', {
                            year: 'numeric',
                            month: 'long',
                            day: 'numeric'
                        }) : 'N/A'}
                    </td>
                </tr>
            `;

            ordersTableBody.innerHTML += row;
        });
    } else {
        ordersTableBody.innerHTML = `<tr><td colspan="7" class="px-4 py-3 text-center text-gray-500 dark:text-gray-400">No orders found</td></tr>`;
    }
    updateCardForm(result);
}


function updateCardForm(result) {
    // Update Total Clients
    document.getElementById('userCount').textContent = result.userCount || 0;

    // Update Total Sales
    document.getElementById('totalAmount').textContent = `₹${result.totalAmount || 0}`;

    // Update Total Orders
    document.getElementById('totalOrder').textContent = result.totalOrder || 0;

    // Update Items Sold
    document.getElementById('itemSold').textContent = result.itemSold || 0;

    // Update Total Coupons Applied
    document.getElementById('totalCouponUsers').textContent = result.totalCouponUsers || 0;

    // Update Total Discount Price
    document.getElementById('totalDiscount').textContent = `₹${result.totalDiscountPrice || 0}`;

    // Update Pending Orders
    document.getElementById('processingOrders').textContent = result.processingOrders || 0;
}

function updatePagination(result) {
    const paginationContainer = document.querySelector('.pagination-container');
    if (paginationContainer) {
        paginationContainer.innerHTML = `
            <div class="flex justify-center items-center space-x-2 mt-4 mb-4">
                ${result.currentPage > 1 ? `
                    <a href="?page=${result.currentPage - 1}&startDate=${result.startDate}&endDate=${result.endDate}"
                       class="px-3 py-2 text-sm font-medium text-gray-600 bg-white border border-gray-300 rounded-md hover:bg-gray-100 dark:text-gray-300 dark:bg-gray-800 dark:border-gray-600 dark:hover:bg-gray-700">
                        &laquo; Previous
                    </a>
                ` : `
                    <span class="px-3 py-2 text-sm font-medium text-gray-400 bg-gray-200 border border-gray-300 rounded-md cursor-not-allowed dark:bg-gray-700 dark:text-gray-500">
                        &laquo; Previous
                    </span>
                `}

                ${Array.from({ length: result.totalPage }, (_, i) => i + 1).map(page => `
                    ${page === result.currentPage ? `
                        <span class="px-3 py-2 text-sm font-medium text-white bg-green-600 border border-blue-600 rounded-md dark:bg-blue-500 dark:border-blue-500">
                            ${page}
                        </span>
                    ` : `
                        <a href="?page=${page}&startDate=${result.startDate}&endDate=${result.endDate}"
                           class="px-3 py-2 text-sm font-medium text-gray-600 bg-white border border-gray-300 rounded-md hover:bg-gray-100 dark:text-gray-300 dark:bg-gray-800 dark:border-gray-600 dark:hover:bg-gray-700">
                            ${page}
                        </a>
                    `}
                `).join('')}

                ${result.currentPage < result.totalPage ? `
                    <a href="?page=${result.currentPage + 1}&startDate=${result.startDate}&endDate=${result.endDate}"
                       class="px-3 py-2 text-sm font-medium text-gray-600 bg-white border border-gray-300 rounded-md hover:bg-gray-100 dark:text-gray-300 dark:bg-gray-800 dark:border-gray-600 dark:hover:bg-gray-700">
                        Next &raquo;
                    </a>
                ` : `
                    <span class="px-3 py-2 text-sm font-medium text-gray-400 bg-gray-200 border border-gray-300 rounded-md cursor-not-allowed dark:bg-gray-700 dark:text-gray-500">
                        Next &raquo;
                    </span>
                `}
            </div>
        `;
    }
}

function getStatusClass(status) {
    switch (status) {
        case 'Order Placed': return 'text-blue-700 bg-blue-100 dark:bg-blue-700 dark:text-blue-100';
        case 'Processing': return 'text-yellow-700 bg-yellow-100 dark:bg-yellow-700 dark:text-yellow-100';
        case 'Shipped': return 'text-purple-700 bg-purple-100 dark:bg-purple-700 dark:text-purple-100';
        case 'Out for Delivery': return 'text-orange-700 bg-orange-100 dark:bg-orange-700 dark:text-orange-100';
        case 'Delivered': return 'text-green-700 bg-green-100 dark:bg-green-700 dark:text-green-100';
        case 'Cancelled': return 'text-red-700 bg-red-100 dark:bg-red-700 dark:text-red-100';
        case 'Return request': return 'text-pink-700 bg-pink-100 dark:bg-pink-700 dark:text-pink-100';
        default: return 'text-gray-700 bg-gray-100 dark:bg-gray-700 dark:text-gray-100';
    }
}

const downloadXlsx = async (result) => {
  console.log("Downloading xls file",result);
    const startDate = document.getElementById("startDate").value;
    const endDate = document.getElementById("endDate").value;
    console.log(startDate,endDate,"1");

    if (!startDate || !endDate) {  
        Swal.fire({
            title: 'Warning',
            text: 'Please select both Start and End dates',
            icon: 'warning'
        });
        return;
    }

    try {
        const response = await fetch(`/admin/download-sales-data`, {
            method: "POST",  
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ startDate, endDate, salesData: result })  
        });

        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = `TickScape-sales-report-${startDate}-${endDate}.xlsx`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
    } catch (error) {
        console.error("Error downloading report:", error);
    }
};


const downloadPDF = async (result) => {
    console.log('PDF Downloading Result:', result);
    const startDate = document.getElementById("startDate").value;
    const endDate = document.getElementById("endDate").value;
    console.log(startDate,endDate,"1");
    
    if (!startDate || !endDate) { 
        Swal.fire({
            title: 'Warning',
            text: 'Please select both Start and End dates',
            icon: 'warning'
        });
        return;
    }

    try {
        const response = await fetch(`/admin/download-pdf`, {
            method: "POST",  
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ startDate, endDate, salesData: result })
        });

        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);

        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = `TickScape-sales-report-${startDate}-${endDate}.pdf`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
    } catch (error) {
        console.error("Error downloading report:", error);
    }
};

</script>
 
<%- include("../../views/partials/admin/footer") %>
