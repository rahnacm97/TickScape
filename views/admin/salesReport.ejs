<%- include("../../views/partials/admin/header") %>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
<script src="https://cdn.tailwindcss.com"></script>
<style>
body {
    font-family: 'Roboto', sans-serif;
    background-color: #f4f6f9;
    margin: 0;
    padding: 0;
}

/* Header */
.content-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px;
    background-color: #f6f7f9;
    border-radius: 5px;
}

/* Title */
.content-title {
    font-size: 28px;
    font-weight: 700;
    color: #333;
    margin: 0;
}

/* Dashboard Image */
.content-main img {
    width: 100%;
    max-width: 1100px;
    display: block;
    margin: 20px auto;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    transition: transform 0.3s ease-in-out;
}

.content-main img:hover {
    transform: scale(1.02);
}

/* Buttons */
button {
    cursor: pointer;
    border: none;
    padding: 12px 16px;
    font-size: 16px;
    font-weight: bold;
    color: white;
    border-radius: 8px;
    transition: 0.3s ease-in-out;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
}

button:hover {
    opacity: 0.85;
    transform: translateY(-2px);
}


/* Responsive Design */
@media (max-width: 1024px) {
    .content-header {
        flex-direction: column;
        text-align: center;
        padding: 10px;
    }

    .content-title {
        font-size: 24px;
    }
}

@media (max-width: 768px) {
    .content-header {
        flex-direction: column;
        text-align: center;
    }

    .content-main img {
        width: 95%;
        margin: 15px auto;
    }

    .grid {
        grid-template-columns: 1fr;
    }

    button {
        width: 100%;
    }
}

.user-count {
    font-size: 1rem; 
    font-weight: bold; 
    color: #06136c; 
}

</style>
<section class="content-main">
    <div class="content-header">
        <div>
            <h2 class="content-title card-title">Sales Report </h2>
        </div>
       
    </div>   

        <div class="flex flex-wrap items-center gap-4 mb-6">
          <form id="dateForm" class="flex flex-wrap items-center gap-4">
            <label for="filterType" class="text-black font-serif text-lg">Filter By:</label>
            <select id="filterType" name="filterType" class="px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
              <option value="daily">Daily</option>
              <option value="weekly">Weekly</option>
              <option value="monthly">Monthly</option>
              <option value="custom">Custom Date Range</option>
            </select>
        
            <!-- Custom Date Range Inputs (hidden by default) -->
            <div id="customDateInputs" class="flex items-center gap-4 hidden">
              <label for="startDate" class="text-black font-serif text-lg">From:</label>
              <input type="date" id="startDate" name="startDate" class="px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
              <span class="font-semibold text-lg">To</span>
              <input type="date" id="endDate" name="endDate" class="px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
            </div>
        
            <button type="submit" class="px-4 py-2 bg-green-600 text-white font-semibold rounded-md hover:bg-green-700 transition">
              Filter
            </button>
          </form>
        </div>
          
          <div>
            <div style="display: flex; justify-content: end; gap: 20px; margin-top: 10px; margin-bottom: 20px;">
              <button id="download" 
                  style="background-color: rgb(9, 115, 9, 0.8); padding: 10px; border-radius: 15px; color: white;">
                  Download Report <i class="fa fa-file-excel" style="color: white;"></i>
              </button> 
          
              <button id="downloadPdf" 
                  style="background-color: rgb(210, 27, 27,0.8); padding: 10px; border-radius: 15px; color: white; ">
                  Download PDF <i class="fa fa-file-pdf" style="color: white;"></i>
              </button>
              <input type="hidden" id="resultData" />
            </div>
          </div> 

          <!-- New Table -->
          <div class="w-full overflow-x-auto rounded-lg shadow-md bg-white dark:bg-gray-800">
            <table class="w-full min-w-max table-auto text-left border-collapse">
              <!-- Table Head -->
              <thead>
                <tr class="bg-gray-500 dark:bg-gray-900 text-gray-800 dark:text-white-300 text-xs uppercase font-semibold tracking-wide">
                  <th class="px-4 py-3 text-center">Sl. No</th>
                  <th class="px-4 py-3">Order ID</th>
                  <th class="px-4 py-3">Quantity</th>
                  <th class="px-4 py-3">Amount</th>
                  <th class="px-4 py-3">Payment Method</th>
                  <th class="px-4 py-3">Status</th>
                  <th class="px-4 py-3">Date</th>
                </tr>
              </thead>
          
              <!-- Table Body -->
              <tbody id="ordersTableBody" class="text-gray-700 dark:text-gray-300 text-sm divide-y dark:divide-gray-700">
                <% if (order.length > 0) { %>
                  <% order.forEach((ordr, index) => { %>
                    <tr class="hover:bg-gray-50 dark:hover:bg-gray-900">
                      <td class="px-4 py-3 text-center font-medium"><%= (currentPage - 1) * limit + index + 1 %></td>
                      <td class="px-4 py-3 font-semibold"><%= ordr.orderId %></td>
                      <td class="px-4 py-3 text-center"><%= ordr.orderedItems
                        .filter(item => item.orderStatus !== "Returned" && item.orderStatus !== "Cancelled")
                        .reduce((sum, item) => sum + item.quantity, 0) %></td>
                      <td class="px-4 py-3 text-sm">₹<%= ordr.finalAmount || '0' %></td>
                      <td class="px-4 py-3 text-sm"><%= ordr.paymentMethod || '0' %></td>
                      <td class="px-4 py-3 text-xs">
                        <span class="px-2 py-1 font-semibold leading-tight rounded-full 
                          <%= getStatusClass(ordr.status) %>">
                          <%= ordr.status %>
                        </span>
                      </td>
                      <td class="px-4 py-3 text-sm"><%= ordr.invoiceDate ? new Date(ordr.invoiceDate).toLocaleDateString('en-US', {
                        year: 'numeric', month: 'long', day: 'numeric'
                      }) : 'N/A' %></td>
                    </tr>
                  <% }); %>
                <% } else { %>
                  <tr>
                    <td colspan="7" class="px-4 py-3 text-center text-gray-500 dark:text-gray-400">No orders found</td>
                  </tr>
                <% } %>
              </tbody>              
            </table>
          </div>

          <!-- Pagination -->            
          <div class="flex justify-center items-center space-x-2 mt-4 mb-4">
            <% if (currentPage > 1) { %>
              <a href="?page=<%= currentPage - 1 %>&filterType=<%= filterType %>&startDatee=<%= startDatee %>&endDatee=<%= endDatee %>"
                 class="px-3 py-2 text-sm font-medium text-gray-600 bg-white border border-gray-300 rounded-md hover:bg-gray-100 dark:text-gray-300 dark:bg-gray-800 dark:border-gray-600 dark:hover:bg-gray-700">
                « Previous
              </a>
            <% } else { %>
              <span class="px-3 py-2 text-sm font-medium text-gray-400 bg-gray-200 border border-gray-300 rounded-md cursor-not-allowed dark:bg-gray-700 dark:text-gray-500">
                « Previous
              </span>
            <% } %>
          
            <% for (let i = 1; i <= totalPage; i++) { %>
              <% if (i === currentPage) { %>
                <span class="px-3 py-2 text-sm font-medium text-white bg-green-600 border border-blue-600 rounded-md dark:bg-blue-500 dark:border-blue-500">
                  <%= i %>
                </span>
              <% } else { %>
                <a href="?page=<%= i %>&filterType=<%= filterType %>&startDatee=<%= startDatee %>&endDatee=<%= endDatee %>"
                   class="px-3 py-2 text-sm font-medium text-gray-600 bg-white border border-gray-300 rounded-md hover:bg-gray-100 dark:text-gray-300 dark:bg-gray-800 dark:border-gray-600 dark:hover:bg-gray-700">
                  <%= i %>
                </a>
              <% } %>
            <% } %>
          
            <% if (currentPage < totalPage) { %>
              <a href="?page=<%= currentPage + 1 %>&filterType=<%= filterType %>&startDatee=<%= startDatee %>&endDatee=<%= endDatee %>"
                 class="px-3 py-2 text-sm font-medium text-gray-600 bg-white border border-gray-300 rounded-md hover:bg-gray-100 dark:text-gray-300 dark:bg-gray-800 dark:border-gray-600 dark:hover:bg-gray-700">
                Next »
              </a>
            <% } else { %>
              <span class="px-3 py-2 text-sm font-medium text-gray-400 bg-gray-200 border border-gray-300 rounded-md cursor-not-allowed dark:bg-gray-700 dark:text-gray-500">
                Next »
              </span>
            <% } %>
          </div>
              
    </div>
        </div>
      </main>
    </div>
</div>

<% 
  function getStatusClass(status) {
    switch (status) {
      case 'Order Placed': return 'text-blue-700 bg-blue-100 dark:bg-blue-700 dark:text-blue-100';
      case 'Processing': return 'text-yellow-700 bg-yellow-100 dark:bg-yellow-700 dark:text-yellow-100';
      case 'Shipped': return 'text-purple-700 bg-purple-100 dark:bg-purple-700 dark:text-purple-100';
      case 'Out for Delivery': return 'text-orange-700 bg-orange-100 dark:bg-orange-700 dark:text-orange-100';
      case 'Delivered': return 'text-green-700 bg-green-100 dark:bg-green-700 dark:text-green-100';
      case 'Cancelled': return 'text-red-700 bg-red-100 dark:bg-red-700 dark:text-red-100';
      case 'Return request': return 'text-pink-700 bg-pink-100 dark:bg-pink-700 dark:text-pink-100';
      default: return 'text-gray-700 bg-gray-100 dark:bg-gray-700 dark:text-gray-100';
    }
  }
%>

</section>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.tailwindcss.com"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>

let result = null;
let eventListenersAdded = false;

document.addEventListener("DOMContentLoaded", () => {
  if (eventListenersAdded) return;
  console.log("DOMContentLoaded event fired");

  const downloadButton = document.getElementById("download");
  const downloadPdfButton = document.getElementById("downloadPdf");
  const filterTypeSelect = document.getElementById("filterType");
  const customDateInputs = document.getElementById("customDateInputs");

  downloadButton.addEventListener("click", () => {
    if (result) downloadXlsx();
    else Swal.fire({ title: "Error", text: "No data available to download.", icon: "error" });
  });

  downloadPdfButton.addEventListener("click", () => {
    if (result) downloadPDF();
    else Swal.fire({ title: "Error", text: "No data available to download.", icon: "error" });
  });

  filterTypeSelect.addEventListener("change", () => {
    customDateInputs.classList.toggle("hidden", filterTypeSelect.value !== "custom");
    if (filterTypeSelect.value !== "custom") {
      result = null;
      document.getElementById("startDate").value = "";
      document.getElementById("endDate").value = "";
    }
  });

  document.getElementById("dateForm").addEventListener("submit", async (e) => {
    e.preventDefault();
    const filterType = filterTypeSelect.value;
    let startDate = document.getElementById("startDate").value;
    let endDate = document.getElementById("endDate").value;

    if (filterType === "custom") {
      if (!startDate || !endDate) {
        Swal.fire({ icon: "warning", title: "Missing Dates", text: "Please select both dates!" });
        return;
      }
      if (new Date(startDate) > new Date(endDate)) {
        Swal.fire({ icon: "error", title: "Invalid Range", text: "Start date must be before end date." });
        return;
      }
      startDate = new Date(startDate).toISOString().split("T")[0];
      endDate = new Date(endDate).toISOString().split("T")[0];
    }

    try {
      const url = `/admin/loadSalesReport?filterType=${filterType}${
        filterType === "custom" ? `&startDatee=${startDate}&endDatee=${endDate}` : ""
      }&page=1`;
      const response = await fetch(url, {
        method: "GET",
        headers: { "X-Requested-With": "XMLHttpRequest" } // Ensure AJAX detection
      });
      if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
      result = await response.json();
      console.log("Filter API Response:", result);
      updateTable(result);
    } catch (error) {
      console.error("Filter fetch error:", error);
      Swal.fire({ icon: "error", title: "Error", text: "Failed to fetch sales report!" });
    }
  });

  eventListenersAdded = true;
});

async function handlePaginationClick(e) {
  e.preventDefault();
  const url = `/admin/loadSalesReport${e.currentTarget.getAttribute("href")}`;
  try {
    const response = await fetch(url, {
      method: "GET",
      headers: { "X-Requested-With": "XMLHttpRequest" }
    });
    if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
    const newResult = await response.json();
    result = newResult;
    updateTable(newResult);
  } catch (error) {
    console.error("Pagination fetch error:", error);
    Swal.fire({ icon: "error", title: "Error", text: "Failed to load page!" });
  }
}

function updateTable(result) {
  const ordersTableBody = document.getElementById("ordersTableBody");
  ordersTableBody.innerHTML = "";
  const limit = 10;

  if (result.order && result.order.length > 0) {
    result.order.forEach((ordr, index) => {
      const quantity = ordr.orderedItems
        .filter(item => item.orderStatus !== "Returned" && item.orderStatus !== "Cancelled")
        .reduce((sum, item) => sum + item.quantity, 0);
      const row = `
        <tr class="hover:bg-gray-50 dark:hover:bg-gray-900">
          <td class="px-4 py-3 text-center font-medium">${(result.currentPage - 1) * limit + index + 1}</td>
          <td class="px-4 py-3 font-semibold">${ordr.orderId}</td>
          <td class="px-4 py-3 text-center">${quantity}</td>
          <td class="px-4 py-3 text-sm">₹${(ordr.finalAmount || 0).toFixed(2)}</td>
          <td class="px-4 py-3 text-sm">${ordr.paymentMethod || "N/A"}</td>
          <td class="px-4 py-3 text-xs">
            <span class="px-2 py-1 font-semibold leading-tight rounded-full ${getStatusClass(ordr.status)}">
              ${ordr.status}
            </span>
          </td>
          <td class="px-4 py-3 text-sm">${
            ordr.invoiceDate
              ? new Date(ordr.invoiceDate).toLocaleDateString("en-US", { year: "numeric", month: "long", day: "numeric" })
              : "N/A"
          }</td>
        </tr>
      `;
      ordersTableBody.innerHTML += row;
    });
  } else {
    ordersTableBody.innerHTML = `<tr><td colspan="7" class="px-4 py-3 text-center text-gray-500 dark:text-gray-400">No orders found</td></tr>`;
  }
  updatePagination(result);
}

function updatePagination(result) {
  const paginationContainer = document.querySelector(".flex.justify-center.items-center.space-x-2.mt-4.mb-4");
  if (!paginationContainer) return;

  let paginationHTML = "";

  if (result.currentPage > 1) {
    paginationHTML += `
      <a href="?page=${result.currentPage - 1}&filterType=${result.filterType}&startDatee=${result.startDatee}&endDatee=${result.endDatee}"
         class="px-3 py-2 text-sm font-medium text-gray-600 bg-white border border-gray-300 rounded-md hover:bg-gray-100 dark:text-gray-300 dark:bg-gray-800 dark:border-gray-600 dark:hover:bg-gray-700">
        « Previous
      </a>
    `;
  } else {
    paginationHTML += `
      <span class="px-3 py-2 text-sm font-medium text-gray-400 bg-gray-200 border border-gray-300 rounded-md cursor-not-allowed dark:bg-gray-700 dark:text-gray-500">
        « Previous
      </span>
    `;
  }

  for (let i = 1; i <= result.totalPage; i++) {
    if (i === result.currentPage) {
      paginationHTML += `
        <span class="px-3 py-2 text-sm font-medium text-white bg-green-600 border border-blue-600 rounded-md dark:bg-blue-500 dark:border-blue-500">
          ${i}
        </span>
      `;
    } else {
      paginationHTML += `
        <a href="?page=${i}&filterType=${result.filterType}&startDatee=${result.startDatee}&endDatee=${result.endDatee}"
           class="px-3 py-2 text-sm font-medium text-gray-600 bg-white border border-gray-300 rounded-md hover:bg-gray-100 dark:text-gray-300 dark:bg-gray-800 dark:border-gray-600 dark:hover:bg-gray-700">
          ${i}
        </a>
      `;
    }
  }

  if (result.currentPage < result.totalPage) {
    paginationHTML += `
      <a href="?page=${result.currentPage + 1}&filterType=${result.filterType}&startDatee=${result.startDatee}&endDatee=${result.endDatee}"
         class="px-3 py-2 text-sm font-medium text-gray-600 bg-white border border-gray-300 rounded-md hover:bg-gray-100 dark:text-gray-300 dark:bg-gray-800 dark:border-gray-600 dark:hover:bg-gray-700">
        Next »
      </a>
    `;
  } else {
    paginationHTML += `
      <span class="px-3 py-2 text-sm font-medium text-gray-400 bg-gray-200 border border-gray-300 rounded-md cursor-not-allowed dark:bg-gray-700 dark:text-gray-500">
        Next »
      </span>
    `;
  }

  paginationContainer.innerHTML = paginationHTML;

  const links = paginationContainer.querySelectorAll("a");
  links.forEach(link => {
    link.removeEventListener("click", handlePaginationClick);
    link.addEventListener("click", handlePaginationClick);
  });
}
  
  function getStatusClass(status) {
    switch (status) {
      case "Order Placed": return "text-blue-700 bg-blue-100 dark:bg-blue-700 dark:text-blue-100";
      case "Processing": return "text-yellow-700 bg-yellow-100 dark:bg-yellow-700 dark:text-yellow-100";
      case "Shipped": return "text-purple-700 bg-purple-100 dark:bg-purple-700 dark:text-purple-100";
      case "Out for Delivery": return "text-orange-700 bg-orange-100 dark:bg-orange-700 dark:text-orange-100";
      case "Delivered": return "text-green-700 bg-green-100 dark:bg-green-700 dark:text-green-100";
      case "Cancelled": return "text-red-700 bg-red-100 dark:bg-red-700 dark:text-red-100";
      case "Return request": return "text-pink-700 bg-pink-100 dark:bg-pink-700 dark:text-pink-100";
      default: return "text-gray-700 bg-gray-100 dark:bg-gray-700 dark:text-gray-100";
    }
  }
  
  const downloadXlsx = async () => {
    const filterType = document.getElementById("filterType").value;
    let startDate = document.getElementById("startDate").value;
    let endDate = document.getElementById("endDate").value;
  
    if (filterType === "custom") {
      if (!startDate || !endDate) {
        Swal.fire({
          title: "Warning",
          text: "Please select both Start and End dates for custom range.",
          icon: "warning",
        });
        return;
      }
      startDate = new Date(startDate).toISOString().split("T")[0];
      endDate = new Date(endDate).toISOString().split("T")[0];
    } else {
      startDate = result.startDatee; // Use server-provided dates for non-custom
      endDate = result.endDatee;
    }
  
    try {
      const response = await fetch("/admin/download-sales-data", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ filterType, startDate, endDate }),
      });
  
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
  
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = `TickScape-sales-report-${startDate}-${endDate}.xlsx`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error("Error downloading Excel:", error);
      Swal.fire({
        title: "Error",
        text: "Failed to download Excel report!",
        icon: "error",
      });
    }
  };
  
  const downloadPDF = async () => {
    const filterType = document.getElementById("filterType").value;
    let startDate = document.getElementById("startDate").value;
    let endDate = document.getElementById("endDate").value;
  
    if (filterType === "custom") {
      if (!startDate || !endDate) {
        Swal.fire({
          title: "Warning",
          text: "Please select both Start and End dates for custom range.",
          icon: "warning",
        });
        return;
      }
      startDate = new Date(startDate).toISOString().split("T")[0];
      endDate = new Date(endDate).toISOString().split("T")[0];
    } else {
      startDate = result.startDatee; // Use server-provided dates for non-custom
      endDate = result.endDatee;
    }
  
    try {
      const response = await fetch("/admin/download-pdf", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ filterType, startDate, endDate }),
      });
  
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
  
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = `TickScape-sales-report-${startDate}-${endDate}.pdf`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error("Error downloading PDF:", error);
      Swal.fire({
        title: "Error",
        text: "Failed to download PDF report!",
        icon: "error",
      });
    }
  };
  </script>
 
<%- include("../../views/partials/admin/footer") %>
