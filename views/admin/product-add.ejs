<%- include("../../views/partials/admin/header") %>
<head>
   <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
</head>
<style>
    body {
        font-family: 'Arial', sans-serif;
        background-color: #f8f4f4;
        margin: 0;
        padding: 0;
        font-size: 12px;
    }
    .error-message {
           color: red;
           font-size: 0.875rem;
           margin-top: 0.25rem;
       }

       .content-main {
           background-color: #f9f9f9;
           padding: 2rem;
       }

       .content-header h2 {
           font-size: 1.75rem;
           color: #333;
       }

       .card {
           background-color: white;
           border: 1px solid #ddd;
           border-radius: 8px;
           margin-bottom: 1.5rem;
           box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
       }

       .card-body {
           padding: 1.5rem;
       }

       .form-label {
           font-size: 1rem;
           color: #333;
           margin-bottom: 0.5rem;
       }

       .form-control {
           font-size: 1rem;
           padding: 0.75rem;
           border: 1px solid #ddd;
           border-radius: 8px;
           width: 100%;
           margin-bottom: 1rem;
           transition: all 0.3s ease;
       }

       .form-control:focus {
           border-color: #1f4dba;
           outline: none;
           box-shadow: 0 0 5px rgba(76, 175, 80, 0.2);
       }

       .btn {
        background-color: #007bff;
        color: white;
        padding: 10px 20px;
        font-size: 14px;
        border-radius: 30px;
        cursor: pointer;
        border: none;             
       }

       .btn:hover {
           background-color: #0056b3;
       }

       .btn-md {
           font-size: 1.125rem;
           padding: 0.75rem 1.25rem;
       }

       .thumbnails-container {
           display: flex;
           overflow-x: auto;
           margin-top: 1rem;
           gap: 1rem;
       }

       .thumbnail {
           position: relative;
           width: 120px;
           height: 120px;
           border-radius: 8px;
           overflow: hidden;
           box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
       }

       .thumbnail img {
           width: 100%;
           height: 100%;
           object-fit: cover;
           border-radius: 8px;
       }

       .remove-icon {
           position: absolute;
           top: 5px;
           right: 5px;
           background: rgba(0, 0, 0, 0.5);
           color: white;
           border-radius: 50%;
           padding: 5px;
           cursor: pointer;
       }

       .remove-icon:hover {
           background: red;
       }

       .image-cropper {
           display: none;
           width: 300px;
           height: 200px;
           margin-bottom: 1rem;
       }

       .image-cropper img {
           width: 100%;
           height: 100%;
           object-fit: cover;
           border-radius: 8px;
       }

       .image-cropper button {
           background-color:  #007bff;
           color: white;
           border: none;
           width: 200px;
           border-radius: 25px;
           padding: 0.5rem 1rem;
           margin-top: 1rem;
           margin-left: 10px;
           cursor: pointer;
       }

       .image-cropper button:hover {
           background-color: #0056b3;
       }

       .card-header h4 {
           font-size: 1.25rem;
           color: #333;
       }

       .card-header {
           background-color: #f2f2f2;
           padding: 1rem;
           border-radius: 8px;
           margin-bottom: 1rem;
       }

       .form-select {
           padding: 0.75rem;
           border-radius: 8px;
           border: 1px solid #ddd;
           width: 100%;
       }

       .form-select:focus {
           border-color: #191e58;
           box-shadow: 0 0 5px rgba(76, 175, 80, 0.2);
       }

       .row {
           margin-bottom: 1rem;
       }

       .col-lg-4 {
           margin-bottom: 1.5rem;
       }

       .publishbutton{
            width: 25%;
            font-size: 1.25rem;
            display: block;
            margin: 0 auto;
        }
 </style>


<section class="content-main">
    <div class="row">
        <div class="col-9">
            <div class="content-header">
                <h2 class="content-title">Add New Product</h2>
            </div>
        </div>
        <div class="col-lg-12">
            <div class="card mb-4">
                <div class="card-body">
                    <form method="POST" action="/admin/addProducts" enctype="multipart/form-data" onsubmit="return validateForm()">
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input id="productName" type="text" placeholder="Type here" name="productName" class="form-control border" >
                            <div id="productName-error" class="error-message"></div>
                        </div>

                        <div class="col-lg-4 mb-4">
                            <label class="form-label">Brand</label>
                            <select class="form-select border" name="brand">
                                <%for(let i=0;i<brand.length;i++){%>  
                                           
                                    <option>
                                     <%= brand[i].brandName%>
                                    </option>
                                   
                                 <%}%>      
                            </select>
                            <div id="brand-error" class="error-message"></div>
                        </div>

 
                        <div class="mb-4">
                            <label class="form-label">Full description</label>
                            <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border" rows="4">A watch is a timepiece carried or worn by a person. It is designed to keep a consistent movement despite the motions caused by the person's activities. A wristwatch is designed to be worn around the wrist, attached by a watch strap or other type of bracelet, including metal bands or leather straps.</textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>
 
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Regular price</label>
                                    <input placeholder="₹" name="regularPrice" type="text" class="form-control border">
                                    <div id="regularPrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Sale price</label>
                                    <input placeholder="₹" name="salePrice" type="text" class="form-control border">
                                </div>
                                <div id="salePrice-error" class="error-message"></div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Quantity</label>
                                    <input placeholder="" name="quantity" type="text" class="form-control border">
                                    <div id="quantity-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                              
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Color</label>
                                    <input name="color" type="text" class="form-control border">
                                </div>
                                <div id="color-error" class="error-message"></div>
                            </div>
                         
                        </div>
                        <div class="card mb-4">
                            <div class="card-body">
                                <div class="row gx-2">
                                    <div class="col-sm-6 mb-3">
                                        <label class="form-label">Category</label>
                                        <select class="form-select border" style="width: 150px;" name="category">
                                             <%for(let i=0;i<cat.length;i++){%>  
                                           
                                                <option>
                                                 <%=cat[i].name%>
                                                </option>
                                               
                                             <%}%>
                                                
                                        </select>
                                        <div id="category-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
 
                        <div class="row">
                            <div class="col-lg-4">
                            <div class="mb-4">
                                <label class="form-label text-white">Choose Images</label>
                            </div>
                            </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                <input name="images" type="file" id="upload" multiple onchange="handleImage(event)" />
                    
                                <div id="cropperContainers"></div> 
                                                                                 
                                <div id="cropperContainer1" class="crop-container" style="display: none;">
                                    <img id="cropImage1" alt="Image to crop">
                                    <button type="button" id="saveButton1" class="btn btn-primary mt-2">Save Cropped Image</button>
                                </div>
                            </div>
                            </div>
                            </div>
 
                        <div>
                            <button class="btn btn-md rounded font-sm hover-up publishbutton" type="button" onclick="validateAndSubmit()">Publish</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
 </section>
 
 <!-- Hidden Cropper container -->
 <!-- <div id="cropperContainer1" class="cropper-container">
     <div class="cropper-card">
         <img id="imgView1" src="" alt="Image for Cropping">
         <button id="saveButton1">Save Cropped Image</button>
         <img id="croppedImg1" src="" alt="Cropped Image">
     </div>
 </div> -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<!-- <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script> -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>

 <script>
     let croppers = {};  
      let croppedImages = [];  

      const handleImage = (e) => {
      const files = e.target.files;  
      console.log("Selected Files: ", files);


      const cropperContainers = document.getElementById("cropperContainers");
      cropperContainers.innerHTML = "";

      for (let i = 0; i < files.length; i++) {
          const file = files[i];
          const reader = new FileReader();

          const cropperContainer = document.createElement('div');
          cropperContainer.id = `cropperContainer${i}`;
          cropperContainer.style.marginBottom = "20px";  
          cropperContainers.appendChild(cropperContainer);

          const img = document.createElement('img');
          img.id = `cropImage${i}`;
          img.style.width = '300px';
          img.style.height = '200px';
          cropperContainer.appendChild(img);

          const saveButton = document.createElement('button');
          saveButton.textContent = 'Save Cropped Image';
          saveButton.id = `saveButton${i}`;
          saveButton.setAttribute("type", "button");
          cropperContainer.appendChild(saveButton);

          reader.onload = function () {
              img.src = reader.result;

              if (typeof Cropper !== 'function') {
                console.error('Cropper.js is not loaded!');
                return;
              }

              if (croppers[i]) {
                  croppers[i].destroy();  
              }

              croppers[i] = new Cropper(img, {
                  aspectRatio: 1,  
                  viewMode: 1,
                  autoCropArea: 1,
              });

            
              saveButton.onclick = function () {
                  const croppedCanvas = croppers[i].getCroppedCanvas({
                      width: 600,  
                      height: 600
                  });

           
                  const fileExtension = file.name.split('.').pop(); 

                  croppedCanvas.toBlob(function (blob) {
                      const url = URL.createObjectURL(blob);

                      
                      img.src = url;  

                      img.dataset.blob = blob;  

                  
                      croppedImages.push(blob);
                      console.log("Cropped Images Array: ", croppedImages);

                     
                      const croppedImagePreview = document.createElement('img');
                      croppedImagePreview.src = url;
                      croppedImagePreview.style.width = '200px';
                      croppedImagePreview.style.height = '200px';
                      cropperContainer.appendChild(croppedImagePreview);

                      cropperContainer.innerHTML = '';  
                      cropperContainer.appendChild(croppedImagePreview); 

                      const reCropButton = document.createElement('button');
                      reCropButton.textContent = 'Re-Crop This Image';
                      reCropButton.setAttribute("type", "button");
                      cropperContainer.appendChild(reCropButton);

                      reCropButton.onclick = function () {
                        
                          img.src = url; 

                         
                          croppers[i].destroy();

                          
                          croppers[i] = new Cropper(img, {
                              aspectRatio: 1, 
                              viewMode: 1,
                              autoCropArea: 1,
                          });

                          cropperContainer.innerHTML = '';  
                          cropperContainer.appendChild(img);  
                          cropperContainer.appendChild(saveButton); 
                      };
                  }, `image/${fileExtension}`, 0.7);  
              };
          };

          reader.readAsDataURL(file);
      }
  };

  console.log('image completed')
  function validateAndSubmit() {
    if (validateForm()) {
        document.forms[0].submit();
        console.log("validateform")
    }
    }
 
    function validateForm() {
    console.log("valid");
    clearErrorMessages();
    console.log('error message cleared')
    const name = document.getElementById('productName').value;
    console.log(1);
    const brand = document.getElementsByName('brand')[0].value;
    console.log("brand");
    const description = document.getElementById('descriptionid').value;
    console.log(2);
    const price = document.getElementsByName('regularPrice')[0].value;
    console.log(3);
    const saleprice = document.getElementsByName('salePrice')[0].value;
    console.log(4);
    const color = document.getElementsByName('color')[0].value;
    console.log(5);
    const category = document.getElementsByName('category')[0].value;
    console.log(6);
    const images = document.getElementById('upload');
    console.log(7);
    const quantity = document.getElementsByName('quantity')[0].value;
    console.log(8);
    let isValid = true;

    if (name.trim() === "") {
        displayErrorMessage('productName-error', 'Please enter a product name.');
        isValid = false;
    } else if (!/^[a-zA-Z0-9\s]+$/.test(name.trim())) {
        displayErrorMessage('productName-error', 'Product name should contain only alphabetic characters.');
        isValid = false;
    }

    if (description.trim() === "") {
        displayErrorMessage('description-error', 'Please enter a product description.');
        isValid = false;
    }
    //  else if (!/^[a-zA-Z0-9,.()\- ]{1,100}$/.test(description.trim())) {
    //     displayErrorMessage('description-error', 'Product description should contain only alphabetic characters.');
    //     isValid = false;
    // }

    if (parseInt(quantity) < 0) {
        displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
        isValid = false;
    }

    if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
        displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
        isValid = false;
    }

    if (!/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) < 0) {
        displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
        isValid = false;
    }
    if (parseFloat(price) <= parseFloat(saleprice)) {
        displayErrorMessage('regularPrice-error', 'Regular price must be greater than sale price.');
        isValid = false;
    }

    if (color.trim() === "") {
        displayErrorMessage('color-error', 'Please enter a color.');
        isValid = false;
    }

    if (!category) {
        displayErrorMessage('category-error', 'Please select a category.');
        isValid = false;
    }

    if (images.files.length === 0) {
        displayErrorMessage("images-error", 'Please select an image.');
        isValid = false;
    }


    return isValid;
}

function displayErrorMessage(elementId, message) {
    var errorElement = document.getElementById(elementId);
    errorElement.innerText = message;
    errorElement.style.display = "block";
}

function clearErrorMessages() {
    const errorElements = document.getElementsByClassName('error-message');
    Array.from(errorElements).forEach(element => {
        element.innerText = '';
    });
}

fetch('/admin/products', {
    method: "POST",
    body: formData
})
.then(response => response.json())
.then(data => {
    if (data.success) {
        Swal.fire({
            icon: "success",
            title: "Success!",
            text: data.message,
            confirmButtonColor: "#3085d6",
            confirmButtonText: "OK"
        }).then(() => {
            window.location.href = data.redirectUrl;  // Redirect after user clicks "OK"
        });
    } else {
        Swal.fire({
            icon: "error",
            title: "Error!",
            text: data.message,
            confirmButtonColor: "#d33",
            confirmButtonText: "OK"
        });
    }
})
.catch(error => {
    console.error("Error:", error);
    Swal.fire({
        icon: "error",
        title: "Oops!",
        text: "Something went wrong. Please try again.",
        confirmButtonColor: "#d33",
        confirmButtonText: "OK"
    });
});

 </script>