//let result = null

// document.getElementById("dateForm").addEventListener("submit", async (e) => {
//   e.preventDefault();
//   const startDate = document.getElementById("startDate").value;
//   const endDate = document.getElementById('endDate').value
//   console.log('start date and end date is',startDate,endDate)

//   const startDatee = new Date(startDate).toISOString().split("T")[0];
//   const endDatee = new Date(endDate).toISOString().split("T")[0];


//   try {
//       const response = await fetch(`/admin/salesReport?startDatee=${startDatee}&&endDatee=${endDatee}`, {
//           method: "GET",
//       });

//       if (!response.ok) {
//           throw new Error(`HTTP error! status: ${response.status}`);
//       }

//       result = await response.json();
//       console.log("API Response:", result);
 
     
//       document.getElementById("totalAmount").innerText = `₹${result.totalAmount || 0}`
//       document.getElementById("totalOrder").innerText = result.totalOrder || 0;
//       document.getElementById("totalDiscount").innerText = `₹${result.totalDiscountPrice || 0}`
//       document.getElementById("totalCouponUsers").innerText = result.totalCouponUsers|| 0;
//       document.getElementById("itemSold").innerText = result.itemSold || 0;
//       document.getElementById("processingOrders").innerText = result.processingOrders || 0;
//       document.getElementById("userCount").innerText = result.userCount || 0;
     
//       console.log("Filtered Orders:", result.order);

// const ordersTableBody = document.getElementById('ordersTableBody');
// ordersTableBody.innerHTML = '';

// if (result.order && result.order.length > 0) {
//     result.order.forEach((ordr, index) => {
//         const quantity = ordr.orderedItems.length > 0 ? ordr.orderedItems[0].quantity : 0;
//         const finalAmount = ordr.finalAmount || '0';
//         const statusClass = getStatusClass(ordr.status);

//         const row = `
//             <tr class="hover:bg-gray-50 dark:hover:bg-gray-900">
//                 <td class="px-4 py-3 text-center font-medium">${index + 1}</td>
//                 <td class="px-4 py-3 font-semibold">${ordr._id}</td>
//                 <td class="px-4 py-3 text-center">${quantity}</td>
//                 <td class="px-4 py-3 text-sm">₹${finalAmount}</td>
//                 <td class="px-4 py-3 text-sm">${ordr.paymentMethod || 'N/A'}</td>
//                 <td class="px-4 py-3 text-xs">
//                     <span class="px-2 py-1 font-semibold leading-tight rounded-full ${statusClass}">
//                         ${ordr.status}
//                     </span>
//                 </td>
//                 <td class="px-4 py-3 text-sm">
//                     ${ordr.createdOn ? new Date(ordr.createdOn).toLocaleDateString('en-US', {
//                         year: 'numeric',
//                         month: 'long',
//                         day: 'numeric'
//                     }) : 'N/A'}
//                 </td>
//             </tr>
//         `;

//         ordersTableBody.innerHTML += row;
//     });
// } else {
//     ordersTableBody.innerHTML = `<tr><td colspan="7" class="px-4 py-3 text-center text-gray-500 dark:text-gray-400">No orders found</td></tr>`;
// }

// function getStatusClass(status) {
//     switch (status) {
//         case 'Order Placed': return 'text-blue-700 bg-blue-100 dark:bg-blue-700 dark:text-blue-100';
//         case 'Processing': return 'text-yellow-700 bg-yellow-100 dark:bg-yellow-700 dark:text-yellow-100';
//         case 'Shipped': return 'text-purple-700 bg-purple-100 dark:bg-purple-700 dark:text-purple-100';
//         case 'Out for Delivery': return 'text-orange-700 bg-orange-100 dark:bg-orange-700 dark:text-orange-100';
//         case 'Delivered': return 'text-green-700 bg-green-100 dark:bg-green-700 dark:text-green-100';
//         case 'Cancelled': return 'text-red-700 bg-red-100 dark:bg-red-700 dark:text-red-100';
//         case 'Return request': return 'text-pink-700 bg-pink-100 dark:bg-pink-700 dark:text-pink-100';
//         default: return 'text-gray-700 bg-gray-100 dark:bg-gray-700 dark:text-gray-100';
//     }
// }

//     document.getElementById("download").addEventListener("click", () => {
//         console.log("Result before download:", result); 
//         downloadXlsx(result);
//     });

//     document.getElementById("downloadPdf").addEventListener("click", () => {
//         console.log("Result before download:", result);
//         downloadPDF(result);
//     });

   
//   } catch (error) {
//       console.error("Fetch error:", error);
//   }
// });


let result = null;
let eventListenersAdded = false;

document.addEventListener("DOMContentLoaded", () => {
    if (eventListenersAdded) {
        console.log("Event listeners already added");
        return;
    }

    console.log("DOMContentLoaded event fired");
    const downloadButton = document.getElementById("download");
    const downloadPdfButton = document.getElementById("downloadPdf");

    if (!downloadButton || !downloadPdfButton) {
        console.error("Download buttons not found in the DOM");
        return;
    }

    downloadButton.addEventListener("click", () => {
        console.log("Download button clicked");
        if (result) {
            downloadXlsx(result);
        } else {
            console.error("No result data available to download.");
        }
    });

    downloadPdfButton.addEventListener("click", () => {
        console.log("Download PDF button clicked");
        if (result) {
            downloadPDF(result);
        } else {
            console.error("No result data available to download.");
        }
    });

    eventListenersAdded = true; // Mark event listeners as added
});

document.getElementById("dateForm").addEventListener("submit", async (e) => {
    e.preventDefault();
    const startDate = document.getElementById("startDate").value;
    const endDate = document.getElementById('endDate').value;
    console.log('start date and end date is', startDate, endDate);

    const startDatee = new Date(startDate).toISOString().split("T")[0];
    const endDatee = new Date(endDate).toISOString().split("T")[0];

    try {
        const response = await fetch(`/admin/salesReport?startDatee=${startDatee}&&endDatee=${endDatee}`, {
            method: "GET",
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        result = await response.json();
        console.log("API Response:", result);

        // Update the UI with the result data
        document.getElementById("totalAmount").innerText = `₹${result.totalAmount || 0}`;
        document.getElementById("totalOrder").innerText = result.totalOrder || 0;
        document.getElementById("totalDiscount").innerText = `₹${result.totalDiscountPrice || 0}`;
        document.getElementById("totalCouponUsers").innerText = result.totalCouponUsers || 0;
        document.getElementById("itemSold").innerText = result.itemSold || 0;
        document.getElementById("processingOrders").innerText = result.processingOrders || 0;
        document.getElementById("userCount").innerText = result.userCount || 0;

        // Update the orders table
        const ordersTableBody = document.getElementById('ordersTableBody');
        ordersTableBody.innerHTML = '';

        if (result.order && result.order.length > 0) {
            result.order.forEach((ordr, index) => {
                const quantity = ordr.orderedItems.length > 0 ? ordr.orderedItems[0].quantity : 0;
                const finalAmount = ordr.finalAmount || '0';
                const statusClass = getStatusClass(ordr.status);

                const row = `
                    <tr class="hover:bg-gray-50 dark:hover:bg-gray-900">
                        <td class="px-4 py-3 text-center font-medium">${index + 1}</td>
                        <td class="px-4 py-3 font-semibold">${ordr._id}</td>
                        <td class="px-4 py-3 text-center">${quantity}</td>
                        <td class="px-4 py-3 text-sm">₹${finalAmount}</td>
                        <td class="px-4 py-3 text-sm">${ordr.paymentMethod || 'N/A'}</td>
                        <td class="px-4 py-3 text-xs">
                            <span class="px-2 py-1 font-semibold leading-tight rounded-full ${statusClass}">
                                ${ordr.status}
                            </span>
                        </td>
                        <td class="px-4 py-3 text-sm">
                            ${ordr.createdOn ? new Date(ordr.createdOn).toLocaleDateString('en-US', {
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric'
                            }) : 'N/A'}
                        </td>
                    </tr>
                `;

                ordersTableBody.innerHTML += row;
            });
        } else {
            ordersTableBody.innerHTML = `<tr><td colspan="7" class="px-4 py-3 text-center text-gray-500 dark:text-gray-400">No orders found</td></tr>`;
        }

    } catch (error) {
        console.error("Fetch error:", error);
    }
});

function getStatusClass(status) {
    switch (status) {
        case 'Order Placed': return 'text-blue-700 bg-blue-100 dark:bg-blue-700 dark:text-blue-100';
        case 'Processing': return 'text-yellow-700 bg-yellow-100 dark:bg-yellow-700 dark:text-yellow-100';
        case 'Shipped': return 'text-purple-700 bg-purple-100 dark:bg-purple-700 dark:text-purple-100';
        case 'Out for Delivery': return 'text-orange-700 bg-orange-100 dark:bg-orange-700 dark:text-orange-100';
        case 'Delivered': return 'text-green-700 bg-green-100 dark:bg-green-700 dark:text-green-100';
        case 'Cancelled': return 'text-red-700 bg-red-100 dark:bg-red-700 dark:text-red-100';
        case 'Return request': return 'text-pink-700 bg-pink-100 dark:bg-pink-700 dark:text-pink-100';
        default: return 'text-gray-700 bg-gray-100 dark:bg-gray-700 dark:text-gray-100';
    }
}